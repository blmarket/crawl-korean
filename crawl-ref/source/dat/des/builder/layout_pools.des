##############################################################
# layout_pools.des
#
# These layouts are based on the add_pools function.  They
#  divide the map into a bunch of irregular areas jammed aginst
#  each other.  The layout may use either the areas themsleves
#  are the paths between them.  These are not true vaults, in
#  that the dungeon builder can add other vaults on top of them.
#

: require("dlua/layout/zonify.lua")



##############################################################
#
# Gehenna layout constants and functions
#
# These are collected together here instead of in the layout
#  vaults because they are each used in more than one.
#
# These maps have a small chance of placing the up stairs.
#  This is handlied by always generating the layout as if
#  the stairs were to be placed, but only sometimes adding
#  them.
#

{{
    -- Increasing this makes the caves bigger
    CANYON_SIZE_FACTOR = 100

    -- The distance stairs are placed from the edge of the map
    STAIRS_FROM_MAP_EDGE = 15

    -- The chance that the up stairs are deliberately placed,
    --  usually at the canyon end: increasing this makes diving
    --  longer and thus harder
    STAIRS_PLACE_PERCENT = 20

    -- The width of the path before the caves are grown is 1 + 2 * size
    PATH_SIZE_BASIC = 2
    PATH_SIZE_TRIPLE = 1

    -- The spacing between 3 stairs placed together on the
    --  _straight, _big_room, _U_turn, _T, and _trident layouts
    STAIRS_SPACING_X = 3
    STAIRS_SPACING_Y = 8

    -- The horizontal path in the _corner, U_turn, and _box
    --  layouts is placed this far from the center of the room
    BASIC_PATH_OFFSET_Y = 15

    -- The spacing between the three paths on the _parallel and
    --  _trident layouts
    TRIPLE_PATH_SPACING = 22



    -- add and fix up the lava and rock pools
    function gehenna_layout_epilogue (e)
        -- you.depth() is the depth in the current branch
        local branch_depth = dgn.br_depth(you.branch())
        local depth_fraction = (you.depth() / branch_depth)

        local pool_contents = {}
        pool_contents["c"] = branch_depth * 2 - you.depth()
        pool_contents["l"] = branch_depth     + you.depth()
        pool_contents["."] = branch_depth
        if pool_contents["."] <= 0 then
            pool_contents["."] = nil
        end

        e.widen_paths { find = "x", percent = 10 }
        e.add_pools { replace = ".",
                      pool_size = 60 - 25 * depth_fraction,
                      contents = pool_contents }
        e.widen_paths { find = "c", percent = 90 }
        e.subst("c = x")
        e.remove_isolated_glyphs { find = "x", percent = 75 }
        e.widen_paths { find = "l", percent = 60 }
        e.remove_isolated_glyphs { find = "l", percent = 90, boxy = true }
    end

    -- Duplicate of function in layout.des header
    function random_wall_material(e)
        if not you.in_branch("Lair") and not you.in_branch("Zot")
           and not you.in_branch("Dis")
           and you.absdepth() >= 4 and crawl.one_chance_in(20) then
            e.subst('x : ccv')
        end
    end

}}

##############################################################
# layout_pools
#
# This layout creates an irregular cave with clumps of rock and
#  possibly a few pools of water.  There are more pools at
#  deeper depths.  Starting at depth 19, there is an increasing
#  chance of lava pools instead of water pools (never mixed).
#
NAME: layout_pools
DEPTH: D:9-
WEIGHT: 10
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand
{{
    local gxm, gym = dgn.max_bounds()
    extend_map { width = gxm, height = gym, fill = 'x' }

    layout_type "caves"

    -- without a starting floor patch, spotty_map will crash
    mapgrd[gxm/2][gym/2] = '.'
    spotty_map { boxy = false, iterations = 1000 }
    remove_isolated_glyphs { find = "x", percent = 100 }

    local pool_contents = {}
    pool_contents["."] = 40
    pool_contents["x"] = 40 - you.absdepth()
    if crawl.coinflip() then
        if you.absdepth() >= 19 + crawl.random2(8) then
            pool_contents["l"] = you.absdepth() * crawl.random2(100) / 100
        else
            pool_contents["w"] = you.absdepth() * crawl.random2(100) / 100
        end
    end

    add_pools { replace = ".",
                pool_size = 10 + crawl.random2(15),
                contents = pool_contents,
                frequency = pool_frequency }

    widen_paths { find = "x", percent = 30 }
    remove_isolated_glyphs { find = "x", percent = 80 }
    widen_paths { find = "l", percent = 30 }
    remove_isolated_glyphs { find = "l", percent = 75, boxy = true }

    random_wall_material(_G)
}}
MAP
ENDMAP

#############################################################
# layout_honeycomb
#
# This layout is composed of a series of irregular rooms
#  directly beside each other.  They are sometimes connected
#  by doors and sometimes just by holes in the wall.
#
NAME: layout_honeycomb
DEPTH: D:12-, Snake:1-4, Tar
WEIGHT: 10, 80(Tar)
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand
{{
    local gxm, gym = dgn.max_bounds()
    extend_map { width = gxm, height = gym, fill = 'x' }

    layout_type "rooms"

    make_circle { x = gxm/2, y = gym/2, radius = 10 }
    mapgrd[gxm/2][gym/2] = '.'
    spotty_map { boxy = true, iterations = 1500 }
    widen_paths { find = "x", percent = 50 }
    remove_isolated_glyphs { find = "x", percent = 100 }

    local connection = {}
    if you.in_branch("snake") then
        connection = '.'
    else
        connection = crawl.random_element({['.'] = 1, ['+'] = 2})
    end

    add_pools { replace = ".",
                contents = {['.'] = 1},
                pool_size = 25 + crawl.random2(25),
                border = 'x' }
    connect_adjacent_rooms { wall = "x", floor = ".", replace = connection,
                             min = 900, max = 1300, check_empty = true }
    connect_adjacent_rooms { wall = "x", floor = ".", replace = connection,
                             min = 100, max = 200, check_empty = false }
    zonify.map_fill_zones(_G, 1, 'x')

    random_wall_material(_G)
}}
# Enforce minimum floor size - this is important
validate {{
    return count_feature_in_box { feat="." } > 600
}}
MAP
ENDMAP

##############################################################
# Gehenna layouts
#
# NOTE: There are other Gehenna layouts in other files.
#
# These layouts are long canyons with lava pools in them and
#  rock "pools" to provide cover.  The up stairs may be placed
#  randomly or at one end of the canyon, while the down stairs
#  are always placed randomly.  Deeper maps have fewer, larger
#  pools, of which more are lava and fewer are rock.
#
# The approximate shape the each canyon is shown above the
#  layout vault.
#
# Simply put, the algorithm is:
#  1. Draw the rough layout shape with fill_area
#  2. Grow a cave map with spotty_map
#  3. Add the stairs (pools must go around these)
#  4. Add the lava and rock pools with add_pools
#  5. Fix up lava and rock pools to look good and have wider
#     paths
#

#  (       )
# {+-------+}
#  [       ]
NAME: layout_gehenna_straight
DEPTH: Geh
WEIGHT: 20
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand no_rotate
{{
    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym, fill = 'x'}

    layout_type "caves"

    local STAIRS_X_UP1  = STAIRS_FROM_MAP_EDGE
    local STAIRS_X_UP23 = STAIRS_FROM_MAP_EDGE + STAIRS_SPACING_X
    local STAIRS_X_DOWN1  = gxm - STAIRS_FROM_MAP_EDGE
    local STAIRS_X_DOWN23 = gxm - STAIRS_FROM_MAP_EDGE - STAIRS_SPACING_X

    local STAIRS_Y_1 = gym / 2
    local STAIRS_Y_2 = STAIRS_Y_1 - STAIRS_SPACING_Y
    local STAIRS_Y_3 = STAIRS_Y_1 + STAIRS_SPACING_Y

    fill_area { x1 = STAIRS_X_UP23,   y1 = STAIRS_Y_2,
                x2 = STAIRS_X_UP23,   y2 = STAIRS_Y_3,
                fill = '.' }
    fill_area { x1 = STAIRS_X_UP1,   y1 = STAIRS_Y_1 - PATH_SIZE_BASIC,
                x2 = STAIRS_X_DOWN1, y2 = STAIRS_Y_1 + PATH_SIZE_BASIC,
                fill = '.' }
    fill_area { x1 = STAIRS_X_DOWN23, y1 = STAIRS_Y_2,
                x2 = STAIRS_X_DOWN23, y2 = STAIRS_Y_3,
                fill = '.' }

    spotty_map { boxy = false, iterations = (4 * CANYON_SIZE_FACTOR) }
    remove_isolated_glyphs { find = "x", percent = 100 }

    if crawl.random2(100) < STAIRS_PLACE_PERCENT then
        mapgrd[STAIRS_X_UP1   ][STAIRS_Y_1] = '{'
        mapgrd[STAIRS_X_UP23  ][STAIRS_Y_2] = '('
        mapgrd[STAIRS_X_UP23  ][STAIRS_Y_3] = '['
        shuffle("{([")

        -- uncomment to place down stairs at other end
        --mapgrd[STAIRS_X_DOWN1 ][STAIRS_Y_1] = '}'
        --mapgrd[STAIRS_X_DOWN23][STAIRS_Y_2] = ')'
        --mapgrd[STAIRS_X_DOWN23][STAIRS_Y_3] = ']'
        --shuffle("})]")
        --shuffle("{([/})]")
    end

    gehenna_layout_epilogue(_G)
}}

#      +
#  (  / \  )
# {+-+ ? +-+}
#  [  \ /  ]
#      +
NAME: layout_gehenna_big_room
DEPTH: Geh
WEIGHT: 25
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand no_rotate
{{
    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym, fill = 'x'}

    layout_type "caves"

    local STAIRS_X_UP1  = STAIRS_FROM_MAP_EDGE
    local STAIRS_X_UP23 = STAIRS_FROM_MAP_EDGE + STAIRS_SPACING_X
    local STAIRS_X_DOWN1  = gxm - STAIRS_FROM_MAP_EDGE
    local STAIRS_X_DOWN23 = gxm - STAIRS_FROM_MAP_EDGE - STAIRS_SPACING_X

    local STAIRS_Y_1 = gym / 2
    local STAIRS_Y_2 = STAIRS_Y_1 - STAIRS_SPACING_Y
    local STAIRS_Y_3 = STAIRS_Y_1 + STAIRS_SPACING_Y

    local big_room_x = gxm / 2 + crawl.random_range(-2, 2)
    local big_room_y = gym / 2 + crawl.random_range(-5, 5)
    local big_room_radius = crawl.random_range(15, 20)

    fill_area { x1 = STAIRS_X_UP23, y1 = STAIRS_Y_2,
                x2 = STAIRS_X_UP23, y2 = STAIRS_Y_3,
                fill = '.' }
    fill_area { x1 = STAIRS_X_UP1,   y1 = STAIRS_Y_1 - PATH_SIZE_BASIC,
                x2 = STAIRS_X_DOWN1, y2 = STAIRS_Y_1 + PATH_SIZE_BASIC,
                fill = '.' }
    fill_area { x1 = STAIRS_X_DOWN23, y1 = STAIRS_Y_2,
                x2 = STAIRS_X_DOWN23, y2 = STAIRS_Y_3,
                fill = '.' }

    make_diamond { x = big_room_x, y = big_room_y,
                   radius = big_room_radius, fill = '.' }

    if crawl.coinflip() then
        make_diamond { x = big_room_x, y = big_room_y,
                       radius = big_room_radius - PATH_SIZE_BASIC * 2,
                       fill = 'x' }
    end

    spotty_map { boxy = false, iterations = (5 * CANYON_SIZE_FACTOR) }
    remove_isolated_glyphs { find = "x", percent = 100 }

    if crawl.random2(100) < STAIRS_PLACE_PERCENT then
        mapgrd[STAIRS_X_UP1   ][STAIRS_Y_1] = '{'
        mapgrd[STAIRS_X_UP23  ][STAIRS_Y_2] = '('
        mapgrd[STAIRS_X_UP23  ][STAIRS_Y_3] = '['
        shuffle("{([")

        -- uncomment to place down stairs at other end
        --mapgrd[STAIRS_X_DOWN1 ][STAIRS_Y_1] = '}'
        --mapgrd[STAIRS_X_DOWN23][STAIRS_Y_2] = ')'
        --mapgrd[STAIRS_X_DOWN23][STAIRS_Y_3] = ']'
        --shuffle("})]")
        --shuffle("{([/})]")
    end

    gehenna_layout_epilogue(_G)
}}

#  (
# {+-------+
#  [       |
#          |
#        (-+-]
#          }
NAME: layout_gehenna_corner
DEPTH: Geh
WEIGHT: 10
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand no_rotate
{{
    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym, fill = 'x'}

    layout_type "caves"

    local STAIRS_X_UP1  = STAIRS_FROM_MAP_EDGE
    local STAIRS_X_UP23 = STAIRS_FROM_MAP_EDGE + STAIRS_SPACING_X
    local STAIRS_X_DOWN2 = gxm - STAIRS_FROM_MAP_EDGE
    local STAIRS_X_DOWN1 = STAIRS_X_DOWN2 - STAIRS_SPACING_Y
    local STAIRS_X_DOWN3 = STAIRS_X_DOWN1 - STAIRS_SPACING_Y

    local STAIRS_Y_UP1 = gym / 2 -  BASIC_PATH_OFFSET_Y
    local STAIRS_Y_UP2 = STAIRS_Y_UP1 - STAIRS_SPACING_Y
    local STAIRS_Y_UP3 = STAIRS_Y_UP1 + STAIRS_SPACING_Y
    local STAIRS_Y_DOWN1  = gym - STAIRS_FROM_MAP_EDGE
    local STAIRS_Y_DOWN23 = STAIRS_Y_DOWN1 - STAIRS_SPACING_X

    fill_area { x1 = STAIRS_X_UP23, y1 = STAIRS_Y_UP2,
                x2 = STAIRS_X_UP23, y2 = STAIRS_Y_UP3,
                fill = '.' }
    fill_area { x1 = STAIRS_X_UP1,   y1 = STAIRS_Y_UP1 - PATH_SIZE_BASIC,
                x2 = STAIRS_X_DOWN1, y2 = STAIRS_Y_UP1 + PATH_SIZE_BASIC,
                fill = '.' }
    fill_area { x1 = STAIRS_X_DOWN1 - PATH_SIZE_BASIC, y1 = STAIRS_Y_UP1,
                x2 = STAIRS_X_DOWN1 + PATH_SIZE_BASIC, y2 = STAIRS_Y_DOWN1,
                fill = '.' }
    fill_area { x1 = STAIRS_X_DOWN2, y1 = STAIRS_Y_DOWN23,
                x2 = STAIRS_X_DOWN3, y2 = STAIRS_Y_DOWN23,
                fill = '.' }

    spotty_map { boxy = false, iterations = (5 * CANYON_SIZE_FACTOR) }
    remove_isolated_glyphs { find = "x", percent = 100 }

    if crawl.random2(100) < STAIRS_PLACE_PERCENT then
        mapgrd[STAIRS_X_UP1  ][STAIRS_Y_UP1]    = '{'
        mapgrd[STAIRS_X_UP23 ][STAIRS_Y_UP2]    = '('
        mapgrd[STAIRS_X_UP23 ][STAIRS_Y_UP3]    = '['
        shuffle("{([")

        -- uncomment to place down stairs at vertical end of canyon
        --mapgrd[STAIRS_X_DOWN1][STAIRS_Y_DOWN1]  = '}'
        --mapgrd[STAIRS_X_DOWN2][STAIRS_Y_DOWN23] = ')'
        --mapgrd[STAIRS_X_DOWN3][STAIRS_Y_DOWN23] = ']'
        --shuffle("})]")
    end

    gehenna_layout_epilogue(_G)
}}

#  (
# {+-------+
#  [       |
#          |
#  )       |
# }+-------+
#  ]
NAME: layout_gehenna_U_turn
DEPTH: Geh
WEIGHT: 5
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand no_rotate
{{
    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym, fill = 'x'}

    layout_type "caves"

    local STAIRS_X_1  = STAIRS_FROM_MAP_EDGE
    local STAIRS_X_23 = STAIRS_FROM_MAP_EDGE + STAIRS_SPACING_X
    local ROOM_END_X = gxm - STAIRS_FROM_MAP_EDGE

    local STAIRS_Y_UP1 = gym / 2 - BASIC_PATH_OFFSET_Y
    local STAIRS_Y_UP2 = STAIRS_Y_UP1 - STAIRS_SPACING_Y
    local STAIRS_Y_UP3 = STAIRS_Y_UP1 + STAIRS_SPACING_Y
    local STAIRS_Y_DOWN1 = gym / 2 + BASIC_PATH_OFFSET_Y
    local STAIRS_Y_DOWN2 = STAIRS_Y_DOWN1 - STAIRS_SPACING_Y
    local STAIRS_Y_DOWN3 = STAIRS_Y_DOWN1 + STAIRS_SPACING_Y

    fill_area { x1 = STAIRS_X_23, y1 = STAIRS_Y_UP2,
                x2 = STAIRS_X_23, y2 = STAIRS_Y_UP3,
                fill = '.' }
    fill_area { x1 = STAIRS_X_1, y1 = STAIRS_Y_UP1 - PATH_SIZE_BASIC,
                x2 = ROOM_END_X, y2 = STAIRS_Y_UP1 + PATH_SIZE_BASIC,
                fill = '.' }
    fill_area { x1 = ROOM_END_X - PATH_SIZE_BASIC, y1 = STAIRS_Y_UP1,
                x2 = ROOM_END_X + PATH_SIZE_BASIC, y2 = STAIRS_Y_DOWN1,
                fill = '.' }
    fill_area { x1 = STAIRS_X_1, y1 = STAIRS_Y_DOWN1 - PATH_SIZE_BASIC,
                x2 = ROOM_END_X, y2 = STAIRS_Y_DOWN1 + PATH_SIZE_BASIC,
                fill = '.' }
    fill_area { x1 = STAIRS_X_23, y1 = STAIRS_Y_DOWN2,
                x2 = STAIRS_X_23, y2 = STAIRS_Y_DOWN3,
                fill = '.' }

    spotty_map { boxy = false, iterations = (7 * CANYON_SIZE_FACTOR) }
    remove_isolated_glyphs { find = "x", percent = 100 }

    if crawl.random2(100) < STAIRS_PLACE_PERCENT then
        mapgrd[STAIRS_X_1 ][STAIRS_Y_UP1]   = '{'
        mapgrd[STAIRS_X_23][STAIRS_Y_UP2]   = '('
        mapgrd[STAIRS_X_23][STAIRS_Y_UP3]   = '['
        shuffle("{([")

        -- uncomment to place down stairs on other branch of U
        --mapgrd[STAIRS_X_1 ][STAIRS_Y_DOWN1] = '}'
        --mapgrd[STAIRS_X_23][STAIRS_Y_DOWN2] = ')'
        --mapgrd[STAIRS_X_23][STAIRS_Y_DOWN3] = ']'
        --shuffle("})]")
        --shuffle("{([/})]")
    end

    gehenna_layout_epilogue(_G)
}}

#           )
#  (        |
# {+--------}
#  [        |
#           ]
NAME: layout_gehenna_T
DEPTH: Geh
WEIGHT: 10
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand no_rotate
{{
    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym, fill = 'x'}

    layout_type "caves"

    local STAIRS_X_UP1  = STAIRS_FROM_MAP_EDGE
    local STAIRS_X_UP23 = STAIRS_FROM_MAP_EDGE + STAIRS_SPACING_X
    local STAIRS_X_DOWN = gxm - STAIRS_FROM_MAP_EDGE

    local STAIRS_Y_1 = gym / 2
    local STAIRS_Y_UP2 = STAIRS_Y_1 - STAIRS_SPACING_Y
    local STAIRS_Y_UP3 = STAIRS_Y_1 + STAIRS_SPACING_Y
    local STAIRS_Y_DOWN2 = STAIRS_FROM_MAP_EDGE
    local STAIRS_Y_DOWN3 = gym - STAIRS_FROM_MAP_EDGE

    fill_area { x1 = STAIRS_X_UP23, y1 = STAIRS_Y_UP2,
                x2 = STAIRS_X_UP23, y2 = STAIRS_Y_UP3,
                fill = '.' }
    fill_area { x1 = STAIRS_X_UP1,  y1 = STAIRS_Y_1 - PATH_SIZE_BASIC,
                x2 = STAIRS_X_DOWN, y2 = STAIRS_Y_1 + PATH_SIZE_BASIC,
                fill = '.' }

    fill_area { x1 = STAIRS_X_DOWN - PATH_SIZE_BASIC, y1 = STAIRS_Y_DOWN2,
                x2 = STAIRS_X_DOWN + PATH_SIZE_BASIC, y2 = STAIRS_Y_DOWN3,
                fill = '.' }

    spotty_map { boxy = false, iterations = (4.5 * CANYON_SIZE_FACTOR) }
    remove_isolated_glyphs { find = "x", percent = 100 }

    if crawl.random2(100) < STAIRS_PLACE_PERCENT then
        mapgrd[STAIRS_X_UP1 ][STAIRS_Y_1]     = '{'
        mapgrd[STAIRS_X_UP23][STAIRS_Y_UP2]   = '('
        mapgrd[STAIRS_X_UP23][STAIRS_Y_UP3]   = '['
        mapgrd[STAIRS_X_DOWN][STAIRS_Y_1]     = '}'
        mapgrd[STAIRS_X_DOWN][STAIRS_Y_DOWN2] = ')'
        mapgrd[STAIRS_X_DOWN][STAIRS_Y_DOWN3] = ']'

        shuffle("{([")
        shuffle("})]")
        shuffle("{([/})]")

        -- remove to place down stairs at other end
        subst("})] = .")
    end

    gehenna_layout_epilogue(_G)
}}

# (         )
# |         |
# {---------}
# |         |
# [         ]
NAME: layout_gehenna_H
DEPTH: Geh
WEIGHT: 5
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand no_rotate
{{
    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym, fill = 'x'}

    layout_type "caves"

    local STAIRS_X_UP   = STAIRS_FROM_MAP_EDGE
    local STAIRS_X_DOWN = gxm - STAIRS_FROM_MAP_EDGE

    local STAIRS_Y_1 = gym / 2
    local STAIRS_Y_2 = STAIRS_FROM_MAP_EDGE
    local STAIRS_Y_3 = gym - STAIRS_FROM_MAP_EDGE

    fill_area { x1 = STAIRS_X_DOWN - PATH_SIZE_BASIC, y1 = STAIRS_Y_2,
                x2 = STAIRS_X_DOWN + PATH_SIZE_BASIC, y2 = STAIRS_Y_3,
                fill = '.' }
    fill_area { x1 = STAIRS_X_UP,   y1 = STAIRS_Y_1 - PATH_SIZE_BASIC,
                x2 = STAIRS_X_DOWN, y2 = STAIRS_Y_1 + PATH_SIZE_BASIC,
                fill = '.' }
    fill_area { x1 = STAIRS_X_UP - PATH_SIZE_BASIC, y1 = STAIRS_Y_2,
                x2 = STAIRS_X_UP + PATH_SIZE_BASIC, y2 = STAIRS_Y_3,
                fill = '.' }

    spotty_map { boxy = false, iterations = (5 * CANYON_SIZE_FACTOR) }
    remove_isolated_glyphs { find = "x", percent = 100 }

    if crawl.random2(100) < STAIRS_PLACE_PERCENT then
        mapgrd[STAIRS_X_UP  ][STAIRS_Y_1] = '{'
        mapgrd[STAIRS_X_UP  ][STAIRS_Y_2] = '('
        mapgrd[STAIRS_X_UP  ][STAIRS_Y_3] = '['
        shuffle("{([")

        -- uncomment to place down stairs in canyon branches at other end
        --mapgrd[STAIRS_X_DOWN][STAIRS_Y_1] = '}'
        --mapgrd[STAIRS_X_DOWN][STAIRS_Y_2] = ')'
        --mapgrd[STAIRS_X_DOWN][STAIRS_Y_3] = ']'
        --shuffle("})]")
        --shuffle("{([/})]")
    end

    gehenna_layout_epilogue(_G)
}}

# (---------)
# |         |
# {         }
# |         |
# [---------]
NAME: layout_gehenna_box
DEPTH: Geh
WEIGHT: 10
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand no_rotate
{{
    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym, fill = 'x'}

    layout_type "caves"

    local STAIRS_X_UP = STAIRS_FROM_MAP_EDGE
    local STAIRS_X_DOWN = gxm - STAIRS_FROM_MAP_EDGE

    local STAIRS_Y_1 = gym / 2
    local STAIRS_Y_2 = STAIRS_Y_1 - BASIC_PATH_OFFSET_Y
    local STAIRS_Y_3 = STAIRS_Y_1 + BASIC_PATH_OFFSET_Y

    fill_area { x1 = STAIRS_X_UP,   y1 = STAIRS_Y_2 - PATH_SIZE_BASIC,
                x2 = STAIRS_X_DOWN, y2 = STAIRS_Y_2 + PATH_SIZE_BASIC,
                fill = '.' }
    fill_area { x1 = STAIRS_X_UP,   y1 = STAIRS_Y_3 - PATH_SIZE_BASIC,
                x2 = STAIRS_X_DOWN, y2 = STAIRS_Y_3 + PATH_SIZE_BASIC,
                fill = '.' }
    fill_area { x1 = STAIRS_X_UP - PATH_SIZE_BASIC, y1 = STAIRS_Y_2,
                x2 = STAIRS_X_UP + PATH_SIZE_BASIC, y2 = STAIRS_Y_3,
                fill = '.' }
    fill_area { x1 = STAIRS_X_DOWN - PATH_SIZE_BASIC, y1 = STAIRS_Y_2,
                x2 = STAIRS_X_DOWN + PATH_SIZE_BASIC, y2 = STAIRS_Y_3,
                fill = '.' }

    spotty_map { boxy = false, iterations = (7.5 * CANYON_SIZE_FACTOR) }
    remove_isolated_glyphs { find = "x", percent = 100 }

    if crawl.random2(100) < STAIRS_PLACE_PERCENT then
        mapgrd[STAIRS_X_UP  ][STAIRS_Y_1] = '{'
        mapgrd[STAIRS_X_UP  ][STAIRS_Y_2] = '('
        mapgrd[STAIRS_X_UP  ][STAIRS_Y_3] = '['
        shuffle("{([")

        -- uncomment to place down stairs at other side of box
        --mapgrd[STAIRS_X_DOWN][STAIRS_Y_1] = '}'
        --mapgrd[STAIRS_X_DOWN][STAIRS_Y_2] = ')'
        --mapgrd[STAIRS_X_DOWN][STAIRS_Y_3] = ']'
        --shuffle("})]")
        --shuffle("{([/})]")
    end

    gehenna_layout_epilogue(_G)
}}

# (-----+---)
#       |
# {--+--+---}
#    |
# [--+------]
NAME: layout_gehenna_parallel
DEPTH: Geh
WEIGHT: 5
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand no_rotate
{{
    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym, fill = 'x'}

    layout_type "caves"

    local STAIRS_X_UP = STAIRS_FROM_MAP_EDGE
    local STAIRS_X_DOWN = gxm - STAIRS_FROM_MAP_EDGE
    local X_LENGTH = STAIRS_X_DOWN - STAIRS_X_UP

    local STAIRS_Y_1 = gym / 2
    local STAIRS_Y_2 = STAIRS_Y_1 - TRIPLE_PATH_SPACING
    local STAIRS_Y_3 = STAIRS_Y_1 + TRIPLE_PATH_SPACING

    local branch_x_1 = STAIRS_X_UP +
                       X_LENGTH * crawl.random_range(20, 80) / 100
    local branch_x_2 = STAIRS_X_UP +
                       X_LENGTH * crawl.random_range(20, 80) / 100

    -- parallel hallways
    fill_area { x1 = STAIRS_X_UP,   y1 = STAIRS_Y_1 - PATH_SIZE_TRIPLE,
                x2 = STAIRS_X_DOWN, y2 = STAIRS_Y_1 + PATH_SIZE_TRIPLE,
                fill = '.' }
    fill_area { x1 = STAIRS_X_UP,   y1 = STAIRS_Y_2 - PATH_SIZE_TRIPLE,
                x2 = STAIRS_X_DOWN, y2 = STAIRS_Y_2 + PATH_SIZE_TRIPLE,
                fill = '.' }
    fill_area { x1 = STAIRS_X_UP,   y1 = STAIRS_Y_3 - PATH_SIZE_TRIPLE,
                x2 = STAIRS_X_DOWN, y2 = STAIRS_Y_3 + PATH_SIZE_TRIPLE,
                fill = '.' }

    -- connections
    fill_area { x1 = branch_x_1 - PATH_SIZE_TRIPLE, y1 = STAIRS_Y_2,
                x2 = branch_x_1 + PATH_SIZE_TRIPLE, y2 = STAIRS_Y_1,
                fill = '.' }
    fill_area { x1 = branch_x_2 - PATH_SIZE_TRIPLE, y1 = STAIRS_Y_1,
                x2 = branch_x_2 + PATH_SIZE_TRIPLE, y2 = STAIRS_Y_3,
                fill = '.' }

    spotty_map { boxy = false, iterations = (6 * CANYON_SIZE_FACTOR) }
    remove_isolated_glyphs { find = "x", percent = 100 }

    if crawl.random2(100) < STAIRS_PLACE_PERCENT then
        mapgrd[STAIRS_X_UP  ][STAIRS_Y_1] = '{'
        mapgrd[STAIRS_X_UP  ][STAIRS_Y_2] = '('
        mapgrd[STAIRS_X_UP  ][STAIRS_Y_3] = '['
        shuffle("{([")

        -- uncomment to place down stairs at other ends of canyons
        --mapgrd[STAIRS_X_DOWN][STAIRS_Y_1] = '}'
        --mapgrd[STAIRS_X_DOWN][STAIRS_Y_2] = ')'
        --mapgrd[STAIRS_X_DOWN][STAIRS_Y_3] = ']'
        --shuffle("})]")
        --shuffle("{([/})]")
    end

    gehenna_layout_epilogue(_G)
}}

#      +----)
#  (   |
# {+--------}
#  [   |
#      +----]
NAME: layout_gehenna_trident
DEPTH: Geh
WEIGHT: 10
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand no_rotate
{{
    local gxm, gym = dgn.max_bounds()
    extend_map{width = gxm, height = gym, fill = 'x'}

    layout_type "caves"

    local STAIRS_X_UP1  = STAIRS_FROM_MAP_EDGE
    local STAIRS_X_UP23 = STAIRS_FROM_MAP_EDGE + STAIRS_SPACING_X
    local STAIRS_X_DOWN = gxm - STAIRS_FROM_MAP_EDGE
    local BRANCH_X = gxm / 2

    local STAIRS_Y_1 = gym / 2
    local STAIRS_Y_UP2 = STAIRS_Y_1 - STAIRS_SPACING_Y
    local STAIRS_Y_UP3 = STAIRS_Y_1 + STAIRS_SPACING_Y
    local STAIRS_Y_DOWN2 = STAIRS_Y_1 - TRIPLE_PATH_SPACING
    local STAIRS_Y_DOWN3 = STAIRS_Y_1 + TRIPLE_PATH_SPACING

    fill_area { x1 = STAIRS_X_UP23, y1 = STAIRS_Y_UP2,
                x2 = STAIRS_X_UP23, y2 = STAIRS_Y_UP3,
                fill = '.' }
    fill_area { x1 = STAIRS_X_UP1, y1 = STAIRS_Y_1 - PATH_SIZE_BASIC,
                x2 = BRANCH_X,     y2 = STAIRS_Y_1 + PATH_SIZE_BASIC,
                fill = '.' }

    fill_area { x1 = BRANCH_X - PATH_SIZE_TRIPLE, y1 = STAIRS_Y_DOWN2,
                x2 = BRANCH_X + PATH_SIZE_TRIPLE, y2 = STAIRS_Y_DOWN3,
                fill = '.' }

    fill_area { x1 = BRANCH_X,      y1 = STAIRS_Y_1 - PATH_SIZE_TRIPLE,
                x2 = STAIRS_X_DOWN, y2 = STAIRS_Y_1 + PATH_SIZE_TRIPLE,
                fill = '.' }
    fill_area { x1 = BRANCH_X,      y1 = STAIRS_Y_DOWN2 - PATH_SIZE_TRIPLE,
                x2 = STAIRS_X_DOWN, y2 = STAIRS_Y_DOWN2 + PATH_SIZE_TRIPLE,
                fill = '.' }
    fill_area { x1 = BRANCH_X,      y1 = STAIRS_Y_DOWN3 - PATH_SIZE_TRIPLE,
                x2 = STAIRS_X_DOWN, y2 = STAIRS_Y_DOWN3 + PATH_SIZE_TRIPLE,
                fill = '.' }

    spotty_map { boxy = false, iterations = (5.5 * CANYON_SIZE_FACTOR) }
    remove_isolated_glyphs { find = "x", percent = 100 }

    if crawl.random2(100) < STAIRS_PLACE_PERCENT then
        mapgrd[STAIRS_X_UP1 ][STAIRS_Y_1]     = '{'
        mapgrd[STAIRS_X_UP23][STAIRS_Y_UP2]   = '('
        mapgrd[STAIRS_X_UP23][STAIRS_Y_UP3]   = '['
        mapgrd[STAIRS_X_DOWN][STAIRS_Y_1]     = '}'
        mapgrd[STAIRS_X_DOWN][STAIRS_Y_DOWN2] = ')'
        mapgrd[STAIRS_X_DOWN][STAIRS_Y_DOWN3] = ']'

        shuffle("{([")
        shuffle("})]")
        shuffle("{([/})]")

        -- remove to place down stairs at other end(s) of canyon
        subst("})] = .")
    end

    gehenna_layout_epilogue(_G)
}}
