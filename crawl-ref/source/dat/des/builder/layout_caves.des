###############################################################################
# layout_caves.des: Layouts based on cavelike formations, largely using
#                   procedural noise functions
###############################################################################

: require("dlua/util.lua")
: require("dlua/layout/procedural.lua")

# This will have a very open area in the middle and rubble around the edges
NAME:   layout_ant_hill
DEPTH:  D:5-25,Lair
WEIGHT: 20
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand
{{
  layout_type "caverns"
  if is_validating() then return end

  local gxm,gym = dgn.max_bounds()
  extend_map { width = gxm, height = gym, fill = 'x' }

  local midx,midy = math.floor(gxm/2),math.floor(gym/2)
  local minmid = math.min(midx,midy)

  local scale = util.random_range_real(2,3.2)/8

  -- Setup a worley function
  local worleywall = procedural.worley_diff { scale = scale }
  local from_mid = function(x,y) return 1-math.sqrt(math.pow(midx-x,2) + math.pow(midy-y,2))/minmid end
  local nearest = function(x,y) return math.min(x,y,gxm-1-x,gym-1-y)/minmid end
  local fnear = crawl.coinflip() and from_mid or nearest
  local map_near = crawl.x_chance_in_y(3,5) -- Mapping the near value produces more what I was going for originally
                                    -- as in wider tunnels in the middle leading to narrow ones at the edge
  local sq_near = (not map_near) and crawl.coinflip() -- Squaring the near function produces smaller more enclosed layouts
  -- We don't both map and square since that makes really small layouts (... maybe that's fine)

  for x = 1,gxm-2,1 do
    for y = 1,gym-2,1 do
      local val, id = worleywall(x,y)
      local near = nearest(x,y)
      if sq_near then near = math.pow(near,2) end
      if map_near then near = procedural.minmax_map(near,0.1,1.5) end
      if val < near then
        mapgrd[x][y] = '.'
      end
    end
  end
  -- Fill disconnected zones. We know the map center must be floor so this is safe.
  mapgrd[midx][midy] = '@'
  fill_disconnected{wanted = '@'}
  mapgrd[midx][midy] = '.'
}}

NAME:   layout_gehenna_lava_paths
DEPTH:  Geh
WEIGHT: 100
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand
{{
  layout_type "paths"
  if is_validating() then return end

  local gxm,gym = dgn.max_bounds()
  extend_map { width = gxm, height = gym, fill = 'x' }

  -- Set a scale to produce some nice-sized chunks
  local scale = util.random_range_real(.5,1.0)
  local path_break = crawl.random2(101)/500 + 0.2  -- 0.2 .. 0.4
  local wall_break = crawl.random2(101)/250 + 0.2 + path_break  -- 0.4 .. 1.0
  local padding = crawl.random_range(5,12)
  -- Setup a worley function
  local worley1 = procedural.worley_diff { scale = scale/8 }
  if (scale > 1.5 and crawl.coinflip()) then
    -- Distort
    worley1 = procedural.distort {
      source = worley1,
      offsetx = procedural.simplex3d { scale = scale*(util.random_range_real(0.2,0.8)) }, -- was 1.8
      offsety = procedural.simplex3d { scale = scale*(util.random_range_real(0.2,0.8)) },
      scale = (util.random_range_real(1,3))/scale/100
    }
  end

  for x = 1,gxm-2,1 do
    for y = 1,gym-2,1 do
      local val = worley1(x,y) + 1 - procedural.boundary_map(x,1,padding,gxm-2-padding,gxm-2)/2 - procedural.boundary_map(y,1,padding,gym-2-padding,gym-2)/2
      if (val) > wall_break then
        mapgrd[x][y] = "x"
      elseif (val) > path_break then
        mapgrd[x][y] = "l"
      else
        mapgrd[x][y] = "."
      end
    end
  end

}}
MAP
ENDMAP

NAME:   layout_gehenna_lava_caves
DEPTH:  Geh
WEIGHT: 100
ORIENT: encompass
TAGS: overwritable layout allow_dup unrand
{{
  layout_type "caverns"
  if is_validating() then return end

  local gxm,gym = dgn.max_bounds()
  extend_map { width = gxm, height = gym, fill = 'x' }
  local scale = util.random_range_real(.3,1.8)
--  local scale = util.random_range_real(0.2,2)
  local perlin1 = procedural.simplex3d { scale = scale }
  if crawl.coinflip() then
    perlin1 = procedural.distort {
      source = perlin1,
      offsetx = procedural.simplex3d { scale = util.random_range_real(1,2) },
      offsety = procedural.simplex3d { scale = util.random_range_real(1,2) },
      scale = util.random_range_real(0.5,1)/scale
    }
  end

  local padding = crawl.random_range(5,12)

  for x = 1,gxm-2,1 do
    for y = 1,gym-2,1 do
      local val = perlin1(x,y) * procedural.boundary_map(x,1,padding,gxm-2-padding,gxm-2) * procedural.boundary_map(y,1,padding,gym-2-padding,gym-2)
      if val < 0.1 then
        mapgrd[x][y] = "x"
      elseif val < 0.25 then
        mapgrd[x][y] = "l"
      elseif val < 0.6 then
        mapgrd[x][y] = "."
      end
    end
  end

}}
MAP
ENDMAP
