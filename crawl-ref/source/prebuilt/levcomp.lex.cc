#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 88
#define YY_END_OF_BUFFER 89
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1243] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   89,   87,   84,   85,
       86,   80,   87,   87,   78,   81,   87,   82,   79,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   84,   34,   36,   87,   87,
       87,   87,   87,   87,   87,   88,    6,   88,   88,    4,
        2,    3,   88,    2,    2,    2,    2,    9,   10,   88,
        9,    9,   88,   12,   88,   32,   84,   33,   86,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,

       32,   32,   32,   32,   84,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   87,   28,   23,   28,   80,   87,
       87,   27,   81,   87,   82,   79,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   28,   34,   36,   87,   87,   87,   87,
       87,   87,   87,   15,   16,   86,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   87,   13,   15,   13,   13,   13,
       13,   13,   13,   88,   21,   22,   88,   20,   88,   84,
       85,    0,   83,    0,   82,   82,   82,   82,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   84,   34,   36,    0,    0,
        0,    0,    0,   34,    0,    0,    0,    0,    0,    0,
        0,    0,   39,    6,    5,    0,    0,    2,    3,    2,
        0,    2,    2,    2,    2,    9,    9,   10,    9,    9,
        9,    0,   11,    0,   12,   31,    0,   31,   84,   33,
        0,    0,   33,   31,    0,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,    0,   30,
       31,   84,   31,   34,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   26,    0,   26,   28,   23,   28,
        0,   23,   26,    0,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,    0,   25,    0,
       26,   28,   26,   34,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   15,   16,    0,    0,    0,   16,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,    0,
       14,   13,   15,   13,   13,   13,   13,   13,   13,   13,
       13,   19,    0,   19,   21,   22,    0,    0,    0,    0,
       18,    0,   82,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    2,    9,    9,    9,    7,    0,    0,   29,    0,
        0,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   34,   31,   31,   31,   31,   31,   31,
       31,    0,   24,    0,    0,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   34,   34,   26,
       26,   26,   26,   26,   26,   26,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,    0,   17,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   35,    0,    0,    0,    0,    0,    0,    2,    9,
        8,    0,    9,    7,    0,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,    0,   31,

        0,   31,   31,   31,   31,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,    0,   26,
        0,   26,   26,   26,   26,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,    0,    0,    0,    0,    0,   45,    0,    0,
       67,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       66,   43,    0,    0,    0,    0,    0,    0,    0,    0,
       52,   64,    0,    0,    0,    0,   38,    0,    0,    0,
        0,    2,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,    0,
       31,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,    0,   26,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        0,    0,   70,    0,   46,    0,   62,   72,   73,   75,
       74,   76,    0,    0,    0,    0,    0,    0,   71,    0,
       48,   63,    0,   55,    0,    0,    0,    0,    0,    0,
        0,   41,    1,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   54,   50,   57,    0,
       53,    0,    0,    0,    0,   68,   56,   47,    0,    0,
       51,    0,    0,    0,    0,    0,    1,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   65,
        0,    0,    0,    0,   69,    0,   49,    0,    0,    0,
        0,    0,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,    0,   31,   31,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,    0,   26,   26,   13,   13,
       13,   13,   13,   13,   13,   13,    0,    0,   59,    0,
       77,    0,    0,    0,   37,    0,    0,   31,   31,   31,
       31,   31,   31,    0,   31,   31,    0,   31,   26,   26,
       26,   26,   26,   26,    0,   26,   26,    0,   26,   13,

       13,   13,   13,   58,    0,   61,    0,   42,   40,   31,
       31,   31,   31,   31,   31,   26,   26,   26,   26,   26,
       26,   13,   13,   60,    0,   31,   31,   26,   26,   13,
        0,   31,   26,   13,    0,   31,   26,   13,   44,   31,
       26,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    7,    1,    1,    8,
        9,    1,   10,   11,   12,   13,    1,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    1,
        1,    1,    1,    1,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       25,   32,   33,   34,   35,   36,   37,   25,   25,   25,
        1,   38,    1,    1,   25,    1,   39,   25,   25,   40,

       41,   42,   43,   44,   45,   25,   25,   46,   25,   25,
       47,   48,   25,   49,   50,   51,   52,   53,   25,   25,
       25,   25,   54,    1,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[56] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        5,    6,    6,    6,    1,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1263] =
    {   0,
        0,   54,   58,   68,   62,   64,   54,   72,  119,  173,
      227,  281,  335,  389,   75,  178, 3725, 4164,   79, 4164,
     3714, 4164, 3702,   76, 4164,   78, 3691,   80, 4164, 3678,
       76, 3674,   62, 3656,  163,   66,   67,  160, 3657, 3651,
     3643,  162,   85, 3650, 3626,  442,    0, 4164,  170, 3613,
     3608, 3606,  149,  151, 3600, 4164, 4164, 3643,  199, 4164,
        0, 4164, 3639,  203,    0, 3609,  175, 3576, 4164, 3626,
       55, 3554,  112, 4164, 3604,  286,  290, 4164,  295,  394,
      398,  407,  411,  420,  424,  451,  464,  470,  474,  480,
      501,  509,  517,  521,  528,  547,  532,  552,  563,  569,

      579,  573,  584,  594,  610,  604,  614,  621,  625,  629,
      634,  641,  651,  656,  403,  673, 4164,  682,  449,  691,
      693, 4164,  699,  703,  713,  567,  619,  717,  642,  719,
      728,  743,  744,  754,  756,  758,  773,  775,  781,  783,
      730,  820,  793,  824,  801,  812,  830,  813,  828,  835,
      836,  840,  847,  851, 4164,  867,  196,  198, 3590,  289,
      288,  200,  291,  183,  292,  439,  464,  494,  271,  294,
      272,  527,  457,  202,  888,  276,  892,  652,  379,  388,
      397,  675,  658,  897,  904, 4164,  908, 4164,  912,  515,
     4164, 3579, 4164, 3563,  405, 3560, 3558,  479, 3541, 3541,

     3529, 3518,  299, 3520, 3506, 3509, 3507, 3486,  296, 3484,
     3488, 3482, 3479, 3476, 3475, 3467,  630, 3485, 3473, 3452,
     3469, 3457, 3446,  504, 3427,    0,    0, 4164, 3413, 3406,
     3403,  420, 3397,    0,  467, 3402, 3407, 3404, 3425,  532,
     3390, 3381, 4164, 4164, 4164, 3427,  872,    0, 4164,    0,
     3421,  915, 3401, 3390,  373, 3354, 3349, 4164,  659, 3347,
      919,  512, 4164, 3395, 4164,  923,  927,  934,  949, 4164,
      953,  964, 4164,  939,  971,  958,  979,  988,  993,  999,
     1006, 1010, 1014, 1023, 1030, 1038, 1049, 1053, 1062, 1058,
     1070, 1079, 1090, 1097, 1105, 1110, 1114, 1120, 1129, 1134,

     1140, 1149, 1158, 1166, 1171, 1175, 1179, 1187, 1216, 4164,
     1198,    0, 1203, 1222, 1226, 1230, 1240, 1244, 1248, 1253,
     1268, 1261, 1272, 1288,  984, 1031, 1298, 1309, 4164, 1317,
     1325, 4164, 1329, 1330, 1083, 1340, 1348, 1352, 1356, 1358,
     1369, 1354, 1279, 1371, 1375, 1383, 1395, 1382, 1399, 1403,
     1393, 1420, 1424, 1430, 1437, 1438, 1442, 1444, 1443, 1450,
     1449, 1459, 1458, 1484, 1489, 1490, 1497, 1501, 4164, 1505,
     1510,    0, 1521, 1529, 1539, 1544, 1549, 1551, 1555, 1553,
     1560, 1559, 1561, 1566, 1576, 4164, 1581, 1598, 1568, 4164,
     3372,  725,  788,  637,  578,  703,  760,  721,  723,  295,

      823,  913,  607, 1182,  418,  766,  384,  454,  834,  533,
      756,  921,  887,  784,  852,  653,  835,  951, 1032, 1613,
     4164,  846,    0, 1066,  934,  185,  587, 1033,  854,  992,
     1076, 1590, 1606, 1618, 1622, 4164, 1627, 1631, 1635, 1643,
     4164, 1647, 3369, 3365, 3350, 3357, 3337, 3328, 3338, 3331,
     3311, 3306, 3312, 3306, 3287, 3286, 3280,  955, 3286, 3275,
     3261, 3272, 3269, 3258, 3254, 3253, 3238, 3235, 1090, 3216,
     3221, 3205, 3202, 3165, 1659, 3147, 1145, 3146, 3157, 3137,
     3130, 3140, 1664, 1672, 1680, 4164, 1684, 1688, 4164, 1692,
     1696, 1702, 1706, 1710, 1716, 1726, 1741, 1745, 1753, 1757,

     1764, 1769, 1776, 1784, 1795, 1799, 1804, 1808, 1814, 1823,
     1834, 1843, 1839, 1853, 1860, 1865, 1878, 1882, 1891, 1902,
     1906, 1921, 1928, 1932, 1943, 1947, 1951, 1956, 1960, 1969,
     1973, 2013, 4164, 2019, 2023, 1874, 1952, 1912, 1981, 1785,
     1974, 2028, 2033, 1900, 2001, 2038, 1830, 2039, 2040, 2045,
     2051, 2047, 2053, 2057, 2068, 2082, 2091, 2092, 2096, 2098,
     2100, 2108, 2102, 2113, 2117, 2140, 2121, 2145, 2159, 2163,
     2152, 2167, 2168, 2169, 2174, 2175, 1177, 1064, 1243, 1017,
      936,  981, 1117, 1210,  870, 1281, 1091,  496, 1181, 1203,
     1500, 1143, 1225, 1153, 1202, 1226, 1267, 1285, 1291, 1362,

      589, 1700, 1234, 1295, 1266, 1351, 1399, 2182, 1057, 1982,
     1333, 1124, 1303,  797, 2189, 4164, 2206, 3145, 3140, 3120,
     3107, 3112, 3109, 3100, 3098, 3092, 3067, 3062, 3058, 3034,
     3015, 3016, 3002, 3005, 3006, 3010, 3003, 2970, 2963, 2951,
     2949, 2948, 2940, 2926, 2934, 2928, 2924, 2915, 2899, 2857,
     2213, 4164, 2861, 1994, 2844, 2827, 2836, 2194, 2859, 2221,
     4164, 2226, 2230, 4164, 2234, 2239, 2245, 2249, 2253, 2263,
     2267, 2288, 2292, 2298, 2304, 2312, 2317, 2323, 2327, 2342,
     2347, 2355, 2364, 2368, 2374, 2386, 2390, 2394, 2405, 2409,
     2399, 2429, 2434, 2440, 2444, 2452, 2456, 2413, 2466, 2472,

     2479, 2483, 2487, 2491, 2496, 2240, 2403, 1999, 2497, 2503,
     2507, 2518, 2522, 2513, 2509, 2544, 2550, 2552, 2556, 2557,
     2561, 2563, 2572, 2565, 2581, 2573, 2595, 2579, 2600, 2602,
     2607, 2613, 2619, 2611, 2627, 2629, 2634, 2639, 2651, 2641,
     2656, 2657, 2661, 2666, 2671, 1311, 1466, 1386, 1485, 1380,
     1415, 1516, 1397, 1532,  987, 1324, 1398, 1440, 1446, 1657,
     1506, 1628, 1658, 1594, 1640, 1625, 1453, 1630, 1689, 1704,
     1659, 1738, 1725, 1710, 1752, 1477, 1740, 1561, 1058, 1690,
     1781, 2332, 2807, 2800, 2796, 2775, 2786, 4164, 2774, 2773,
     4164, 2763, 2762, 2759, 2753, 2749, 2725, 2722, 1742, 2717,

     4164, 4164, 2706, 2721, 2697, 2700, 2699, 2680, 2687, 2662,
     4164, 4164, 2652, 2654, 2628, 2627, 4164, 2629, 2621, 2313,
     2576, 2583, 2679, 2688, 2714, 2696, 2718, 2733, 2737, 2742,
     2746, 2757, 2761, 2777, 2781, 2785, 2765, 2789, 2800, 2804,
     2808, 2812, 2820, 2824, 2839, 2851, 2855, 2847, 2863, 2859,
     2843, 2867, 2878, 2882, 2886, 2898, 2902, 2909, 2913, 2917,
     2921, 2925, 2926, 2951, 2940, 2952, 2932, 2960, 2971, 2972,
     2977, 2979, 2986, 2991, 2997, 2995, 3002, 3003, 3011, 3009,
     3017, 3018, 3043, 3025, 3049, 3055, 3034, 3060, 3048, 3064,
     3066, 3071, 3072, 3077, 3083, 3087, 3089, 3094, 3101, 3106,

     1798, 1785, 1836, 1505, 1906, 1840, 1967, 2067, 2189, 2251,
     2260, 2320, 1861, 1853, 2119, 1858, 1929, 2326, 1975, 2449,
     2523, 1862, 2556, 1896, 1979, 1629, 2233, 1739, 2103, 1930,
     2583, 2578, 4164, 2558, 4164, 2530, 4164, 4164, 4164, 4164,
     4164, 4164, 2538, 1879, 2518, 2483, 2482, 2438, 4164, 2401,
     4164, 4164, 2377, 4164, 2360, 2360, 2354, 2320, 2311, 2312,
     2272, 4164, 2306, 3115, 3132, 3136, 3141, 3146, 3157, 3161,
     3167, 3171, 3176, 3181, 3185, 3192, 3198, 3208, 3213, 3220,
     3224, 3229, 3238, 3243, 3250, 3255, 3259, 3264, 3268, 3275,
     3280, 3285, 3294, 3303, 3307, 3206, 3312, 3111, 3314, 3126,

     3319, 3298, 3320, 3328, 3337, 3338, 3342, 3344, 3359, 3358,
     3346, 3363, 3384, 3367, 3385, 3369, 3389, 3390, 3401, 3406,
     3410, 3411, 3412, 3416, 3424, 3432, 3433, 2610, 2635, 2665,
     2118, 2672, 2286, 2079, 1161, 2690, 2717, 2730, 2104, 2047,
     2740, 2162, 1959, 2168, 2239, 2247, 4164, 4164, 4164, 2274,
     4164, 2210, 2173, 2161, 2101, 4164, 4164, 4164, 2112, 2074,
     4164, 2071, 2056, 2023, 2425, 2022, 1995, 3438, 3451, 3455,
     3462, 3470, 3476, 3480, 3486, 3490, 3494, 3505, 3517, 3521,
     3529, 3533, 3537, 3542, 3546, 3556, 3560, 3551, 3564, 3568,
     3576, 3574, 3581, 3580, 3588, 3590, 3594, 3595, 3603, 3619,

     3611, 3618, 3620, 3625, 3634, 3638, 3642, 2817, 2294, 2246,
     2176, 2335, 2818, 2261, 2822, 1888, 2243, 3646, 2341, 4164,
     1803, 1766, 1722, 1709, 4164, 1499, 4164, 1394, 2719, 2890,
     1271, 2894, 3648, 3660, 3664, 3669, 3677, 3691, 3699, 3704,
     3708, 3714, 3718, 3722, 3726, 3683, 3731, 3736, 3752, 3745,
     3757, 3773, 3768, 3777, 3782, 3784, 3789, 3791, 2413, 2439,
     2920, 2460, 2972, 2490, 3738, 3795, 1260, 1251, 4164, 1014,
     4164,  918, 3152,  766, 4164, 3196,  674, 3797, 3814, 3819,
     3826, 3835, 3842, 3846, 3851, 3856, 3861, 3865, 3857, 3866,
     3872, 3873, 3874, 3880, 3885, 3891, 3896, 3904, 3911, 3029,

     2493, 3065, 2503, 4164,  659, 4164,  528, 4164, 4164, 3922,
     3926, 3931, 3942, 3946, 3950, 3915, 3957, 3935, 3961, 3965,
     3966, 3082, 2387, 4164,  412, 3972, 3977, 3973, 3981, 2624,
      362, 3987, 3991, 2683,  203, 4003, 4011, 3099, 4164, 3996,
     3992, 4164, 4049, 4055, 4061, 4067, 4073, 4079, 4085, 4091,
     4097, 4103, 4109, 4115, 4121, 4127, 4133, 4139, 4145, 4151,
      105, 4157
    } ;

static yyconst flex_int16_t yy_def[1263] =
    {   0,
     1242,    1, 1243, 1244, 1245, 1245, 1246, 1246, 1242,    9,
     1242,   11, 1242,   13, 1247, 1247, 1242, 1242, 1242, 1242,
     1242, 1242, 1248, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1249, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1250, 1242,
     1251, 1242, 1242, 1252, 1251, 1251, 1251, 1253, 1242, 1242,
     1253, 1253, 1254, 1242, 1242, 1255, 1242, 1242, 1242, 1255,
     1256, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,

     1255, 1255, 1255, 1255,   46, 1257, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1258, 1242, 1242, 1242, 1258, 1259,
     1258, 1242, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258,   46, 1260, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1242, 1242, 1242, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1242, 1261,   46, 1261, 1261, 1261,
     1261, 1261, 1261, 1262, 1242, 1242, 1242, 1242, 1262, 1242,
     1242, 1248, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,

     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242,   46, 1249, 1242, 1242, 1242,
     1242, 1242, 1242, 1249, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1251, 1242, 1251,
     1242, 1251, 1251, 1251, 1251, 1253, 1253, 1242, 1253, 1253,
     1253, 1254, 1242, 1242, 1242, 1255, 1255, 1255, 1242, 1242,
     1242, 1242, 1242, 1256, 1256, 1255, 1256, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,

     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1242,
     1255,  105, 1257, 1257, 1257, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1258, 1258, 1258, 1242, 1242, 1242,
     1242, 1242, 1259, 1259, 1258, 1259, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1242, 1242,
     1258,  144, 1260, 1260, 1260, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1242, 1242, 1242, 1242, 1242, 1242,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,

     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1242,
     1242, 1261,  177, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1262, 1262, 1262, 1242, 1242, 1242, 1242, 1242, 1262,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1251, 1253, 1253, 1253, 1242, 1242, 1255, 1242, 1242,
     1256, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,

     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1257, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1258, 1242, 1242, 1259, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1260, 1249, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,

     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1262, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1251, 1253,
     1242, 1242, 1253, 1242, 1242, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,

     1255, 1255, 1255, 1255, 1255, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,

     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1251, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,

     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1251, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1258, 1258, 1258, 1258, 1258,

     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1251, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,

     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1261,

     1261, 1261, 1261, 1242, 1242, 1242, 1242, 1242, 1242, 1255,
     1255, 1255, 1255, 1255, 1255, 1258, 1258, 1258, 1258, 1258,
     1258, 1261, 1261, 1242, 1242, 1255, 1255, 1258, 1258, 1261,
     1242, 1255, 1258, 1261, 1242, 1255, 1258, 1261, 1242, 1255,
     1258,    0, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242
    } ;

static yyconst flex_int16_t yy_nxt[4220] =
    {   0,
       18,   19,   20,   21,   19,   18,   22,   23,   18,   24,
       25,   26,   27,   28,   29,   18,   30,   31,   32,   18,
       33,   18,   18,   34,   18,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   18,   18,   44,   18,   18,   45,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   46,   74,   75,   46,   47,
       57,   58,   59,   60,   69,   70,   69,   70,   48,   56,
       62,   63,   64,   65,   74,   75,  185,  186,  187,  185,
      190,   49,  213,  190,  204,  188,  211,   66,  194,  195,
      194,  195,  197,  198,   50,  205,  214,  212,  200,   51,

      222,   52,  201,   53,  259,  202,   54,   55,  223,  260,
      391,   71,  189,   71,  263,  264,   72,   67,   72,   76,
       77,   78,   79,   77,   76,   80,   81,   76,   82,   83,
       84,   85,   86,   87,   76,   88,   89,   90,   76,   91,
       76,   76,   92,   76,   93,   94,   95,   96,   97,   98,
       99,  100,  101,   76,   76,  102,  103,   76,  104,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,  105,  215,  239,  105,  106,  185,
      186,  187,  185,  207,  220,  235,  208,  107,  188,  241,
      209,  242,  216,  210,  254, 1242,  221, 1242,  240,  214,

      108,  244,  246,  247,  245,  249,  251,  252,  194,  392,
      197,  393, 1242,  109, 1242,  189,  401, 1239,  110,  398,
      111,  419,  112,  610,  255,  113,  114,  115,  116,  117,
      118,  116,  115,  119,  120,  115,  121,  122,  123,  124,
      125,  126,  115,  127,  128,  129,  115,  130,  115,  115,
      131,  115,  132,  133,  134,  135,  136,  137,  138,  139,
      140,  115,  115,  141,  142,  115,  143,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  144, 1242, 1242,  144,  145,  267, 1242,  267,
      267,  269,  270,  271,  269,  146,  271,  273,  271,  271,

     1242, 1242,  412, 1242, 1242,  414, 1242, 1242,  147,  394,
      395,  455,  402,  399,  396,  403,  422,  397,  584,  404,
      413,  148,  405,  268,  400,  456,  149,  272,  150,  448,
      151,  449,  272,  152,  153,   18,  154,  155,  156,  154,
       18,   22,   23,   18,   24,   25,  157,   27,  158,   29,
      159,  160,  161,  162,  159,  163,  159,  159,  164,  159,
      165,  166,  167,  168,  169,  170,  171,  172,  173,  159,
      159,  174,  175,  159,  176,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,   18,   18,
      177, 1242,  254,  177,   47,  267, 1242,  267,  267,  275,

     1242,  267,  275,   48,  326, 1235,  276,  326,  267, 1242,
      267,  267,  267,  592,  267,  267,  178,  197,  198,  278,
      279,  267,  255,  267,  267,  267,  425,  267,  267,  179,
     1242,  268,  278,  279,  180,  277,  181,  280,  182,  426,
      327,  183,   55,  226,  268,  427,  226,  227,  268,  590,
      326, 1242,  267,  326,  267,  267,  228,  268,  241,  406,
      242,  268, 1231,  281,  282,  267, 1242,  267,  267, 1242,
      407,  267,  417,  267,  267,  267, 1242,  267,  267,  408,
      418,  267,  229,  267,  267,  593,  327,  230,  268,  231,
      283,  197,  198,  409,  232,  233,  284,  475,  460,  287,

      285,  268,  267,  286,  267,  267, 1242,  268, 1242,  410,
      267,  268,  267,  267,  263,  264,  190,  268,  267,  190,
      267,  267,  267,  288,  267,  267,  411,  472,  757,  267,
      473,  267,  267,  267,  289,  267,  267,  291,  268, 1242,
      292,  295,  290,  297,  293, 1242,  268,  294,  267,  415,
      267,  267,  296,  267,  268,  267,  267,  298,  268,  239,
      595,  416,  299,  301,  267,  268,  267,  267,  326,  268,
      267,  326,  267,  267,  267, 1225,  267,  267,  302,  300,
      267,  240,  267,  267,  268,  309,  310,  309,  309,  268,
     1242,  304,  308,  578,  306,  267,  303,  267,  267, 1242,

      268, 1242,  307,  305,  327,  314,  268,  314,  314,  771,
      268,  312,  270,  271,  312,  267,  268,  267,  267, 1242,
      326,  268,  267,  326,  267,  267,  267,  611,  267,  267,
      267,  268,  267,  267,  311,  267,  316,  267,  267,  342,
      587,  315,  267,  326,  267,  267,  326,  272,  464, 1242,
      298,  268,  267,  465,  267,  267,  327,  267,  268,  267,
      267,  346,  268,  577, 1242, 1242,  268,  424,  320,  602,
     1242,  268,  317, 1224,  328,  329,  330,  328,  268,  327,
      318,  409,  319,  330,  332,  330,  330, 1242,  268,  322,
      321,  323,  334,  268,  326,  334,  430,  326,  431,  335,

      326,  192,  428,  326,  326,  337,  338,  326,  259,  324,
      331,  337,  338,  260,  326, 1242,  339,  326,  326,  331,
      326,  326,  579,  326,  429,  340,  341, 1209,  336,  326,
      327,  326,  326, 1242,  326, 1242,  327,  197,  393,  343,
      327,  347,  583,  344,  326,  326,  345,  326,  326,  367,
      327,  581,  348,  582,  327,  326,  327,  326,  326,  326,
      326,  349,  326,  350,  354,  327,  351,  327, 1242,  356,
      352,  358, 1242,  353,  326,  355,  326,  326, 1242,  326,
      327,  327,  326,  357,  326,  326,  580,  326,  359,  360,
      596,  327,  591,  327,  326,  327, 1242,  326,  365,  361,

      197,  393,  374,  363,  234,  374,  366,  600,  362, 1242,
      327,  234,  327,  326,  326,  364,  326,  326,  327, 1208,
      327,  368,  369,  370,  368,  372,  329,  330,  372,  326,
      327,  326,  326,  371,  326, 1242,  326,  326,  375,  326,
      326,  326,  585,  782,  326,  376, 1242, 1242,  326,  327,
      327,  326,  385,  386,  387,  385,  603,  327, 1242,  357,
      377,  331,  594,  380, 1242,  327, 1242,  327,  389,  390,
      389,  389,  327,  327,  244,  246,  247,  327,  382,  378,
      383,  428, 1242,  379,  327,  381,  601,  607,  388,  420,
      421,  420,  420,  423,  386,  387,  423,  754,  433, 1242,

      384,  433,  599,  429,  388,  435,  436,  437,  435,  439,
      436,  439,  439,  440,  441,  442,  440,  249,  251,  252,
      485,  486,  487,  485,  267, 1242,  267,  267,  267,  388,
      267,  267,  586, 1242,  434,  488,  489,  488,  488,  597,
      275,  438,  267,  275,  598,  438, 1242,  276, 1242,  434,
      269,  270,  271,  269,  271,  270,  271,  271, 1207,  267,
      268,  267,  267, 1242,  268,  490,  310,  490,  490,  750,
      632,  268,  275,  483,  267,  275,  277,  604,  609,  276,
      491,  489,  488,  491,  633,  326,  272,  276,  326,  267,
      272,  267,  267, 1242,  267,  268,  267,  267,  751, 1242,

      267,  280,  267,  267, 1242,  281,  282,  267,  277,  267,
      267,  267,  280,  267,  267,  267,  277,  267,  267,  492,
      908,  327,  281,  282,  267,  268,  267,  267, 1206, 1242,
      268,  267,  326,  267,  267,  326,  268,  613,  494,  267,
      493,  267,  267,  268, 1242, 1242,  749,  268,  612,  495,
      267,  268,  267,  267,  267,  605,  267,  267,  606,  267,
      268,  267,  267,  267,  496,  267,  267,  268,  327, 1242,
     1242,  267,  499,  267,  267,  268, 1242,  501, 1242,  497,
      267,  498,  267,  267,  326,  500,  268,  326, 1242,  502,
      268,  267,  747,  267,  267,  268,  608,  593,  267,  268,

      267,  267,  779, 1242,  928,  504,  267,  268,  267,  267,
      756,  267,  503,  267,  267,  267,  268,  267,  267,  505,
      327,  267,  644,  267,  267,  645,  614,  268,  506, 1242,
      267,  507,  267,  267,  268,  267, 1242,  267,  267,  508,
      752,  267,  268,  267,  267,  509,  654,  268,  510,  654,
      267,  268,  267,  267,  608, 1242,  511,  268,  513,  267,
      762,  267,  267,  514,  515, 1242,  268,  267,  512,  267,
      267,  268,  267, 1242,  267,  267,  267,  268,  267,  267,
      267,  516,  267,  267, 1112,  764,  268,  518,  267, 1242,
      267,  267,  746, 1242, 1242,  268,  519,  588,  655,  267,

      517,  267,  267,  268,  314,  520,  314,  314,  268,  758,
      521,  589,  268,  522, 1242, 1242,  268,  309,  310,  309,
      309,  765, 1242,  314,  268,  314,  314,  524,  489,  524,
      524,  267,  759,  267,  267,  268,  753, 1242, 1242,  523,
      315,  267,  766,  267,  267,  267, 1242,  267,  267,  267,
      763,  267,  267,  268,  267, 1242,  267,  267,  748,  315,
      525,  509,  267,  315,  267,  267,  774,  268,  529,  267,
     1205,  267,  267,  267, 1204,  267,  267,  268, 1242, 1242,
      326,  268,  527,  326,  526,  268,  767,  776,  528,  267,
      268,  267,  267, 1242,  538,  320,  755, 1242,  268,  532,

      533,  534,  532, 1242,  768,  268,  530, 1242,  769,  268,
      328,  329,  330,  328,  775, 1242,  327,  321,  330,  329,
      330,  330,  531, 1242, 1175,  268,  370,  369,  370,  370,
      334,  334,  901,  334,  334,  327, 1242,  335,  335,  192,
      192,  535,  533,  534,  535, 1242,  331,  781,  335,  326,
      192,  909,  326,  326,  331,  326,  326,  326,  326,  326,
      326,  339,  326, 1242,  340,  341,  336,  336,  777,  339,
      326,  536,  326,  326, 1242,  326,  326,  336,  780,  326,
      537,  340,  341,  326,  326,  327,  326,  326,  770,  327,
      539,  327, 1242,  327,  326,  327,  326,  326, 1242,  326,

      326,  540,  905,  326,  326,  544,  327,  326,  327, 1242,
     1242, 1242,  327,  541,  543,  542,  907,  903,  545,  327,
      327,  326,  546,  910,  326,  326,  547, 1242,  326,  788,
      327,  326,  327, 1172,  326,  548,  327,  778,  326,  326,
      327,  326,  326,  326,  326,  326,  326,  326,  326,  549,
      326,  326, 1242,  326,  326,  550,  551,  327, 1242,  326,
      326,  327,  326,  326,  559, 1242,  552,  327,  557,  553,
      554,  555,  911,  558,  327,  327,  912,  556, 1242,  327,
      327,  327,  560,  902,  918,  326,  327,  327,  326, 1242,
      326,  326,  561,  326,  326,  327,  327, 1242,  326,  925,

      562,  326,  368,  369,  370,  368,  370,  369,  370,  370,
      563,  326, 1242, 1171,  326,  760,  564, 1242, 1242,  904,
      565,  327,  374,  566,  234,  374,  327,  327, 1242,  761,
      374,  234,  234,  374,  327,  914, 1030,  906,  327,  234,
      568,  533,  569,  568, 1242,  326,  791,  327,  326,  234,
      326,  567,  326,  326,  326,  326,  326,  326,  375,  326,
      326,  326,  326,  326,  326,  326,  375,  326,  574,  389,
      326,  389,  389, 1242,  570,  553,  375,  385,  386,  387,
      385,  327,  389,  386,  389,  389,  327,  380,  327,  572,
      327,  433,  327,  571,  433,  573,  327,  327,  327,  420,

      421,  420,  420,  327,  575,  388, 1242,  433,  801,  381,
      433,  576,  927,  388,  420,  421,  420,  420,  388,  615,
      616,  617,  615,  435,  436,  437,  435,  434,  439,  436,
      439,  439,  442,  441,  442,  442,  439, 1242,  439,  439,
     1242, 1242, 1242,  434,  440,  441,  442,  440,  442,  441,
      442,  442, 1242,  915,  802,  434, 1042,  917,  919,  438,
      651,  652,  651,  651,  438,  660,  661,  662,  660, 1242,
     1242, 1242,  438,  663,  664,  665,  663,  916,  913,  922,
      434,  485,  486,  487,  485,  487,  486,  487,  487,  488,
      489,  488,  488,  490,  310,  490,  490,  491,  489,  488,

      491, 1242, 1242,  267,  276,  267,  267,  267,  920,  267,
      267,  267, 1242,  267,  267,  492, 1242,  267,  483,  267,
      267,  666, 1242,  921,  811,  268,  483,  267, 1170,  267,
      267,  668,  772,  277,  257,  773, 1169, 1242,  667,  268,
      924,  929,  267,  268,  267,  267,  267,  268,  267,  267,
     1242, 1242, 1242,  268,  267,  669,  267,  267,  267,  945,
      267,  267,  671,  268, 1242,  267,  812,  267,  267,  926,
      267,  923,  267,  267,  670,  946,  672,  267,  268,  267,
      267, 1044,  268,  673,  675,  267,  326,  267,  267,  326,
      268,  674, 1168, 1242,  268,  676,  267, 1242,  267,  267,

      267,  268,  267,  267, 1029,  267,  268,  267,  267,  267,
     1242,  267,  267,  268,  709,  267,  677,  267,  267,  680,
      930,  268,  327,  678,  267,  682,  267,  267,  679, 1167,
     1028,  326,  268,  681,  326,  267,  268,  267,  267,  683,
      267,  268,  267,  267,  267,  268,  267,  267, 1242,  716,
      933,  268, 1242,  685,  267,  684,  267,  267,  687,  686,
      268,  267, 1031,  267,  267, 1242,  267,  327,  267,  267,
     1242,  268,  688, 1242, 1242,  326,  268,  689,  326,  267,
      268,  267,  267,  267, 1033,  267,  267,  536, 1039, 1036,
      268,  690,  267, 1032,  267,  267, 1052,  268,  691, 1164,

     1242,  326,  268,  267,  326,  267,  267,  267, 1242,  267,
      267,  327, 1053,  326,  692,  268,  326,  693, 1242,  268,
      935,  695,  267,  694,  267,  267,  713,  696,  268,  267,
     1040,  267,  267,  524,  489,  524,  524,  327,  697,  268,
      707, 1242, 1242,  268,  699,  652,  699,  699,  267,  327,
      267,  267,  701,  326,  267,  701,  326,  267,  268,  267,
      267,  267, 1037,  267,  267,  268,  698,  706, 1046,  315,
      267, 1242,  267,  267,  267,  326,  267,  267,  326, 1242,
      268,  937,  326,  654,  268,  326,  654, 1242,  268,  327,
      525, 1242,  700,  268, 1242,  654,  708,  268,  654, 1067,

      326,  703,  326,  326,  702,  326,  268,  710, 1038, 1116,
      268,  327, 1041,  704,  532,  533,  534,  532,  327,  705,
      534,  533,  534,  534,  535,  533,  534,  535,  714,  326,
      864,  335,  326,  192,  326,  655,  327,  326,  327,  326,
      326,  326,  326,  326,  326,  711,  326,  655,  326,  326,
      327,  326,  326,  715,  326,  326,  712,  326,  326, 1242,
      336,  326, 1132, 1129,  722,  327,  720, 1128,  718,  326,
      327,  717,  326, 1114,  719,  327,  327,  327,  723, 1242,
      721,  938,  327,  326,  327, 1127,  326,  725,  327,  724,
      327, 1242,  326,  326,  327,  326,  326,  326,  726,  326,

      326,  326,  326,  326,  326,  327,  326, 1126, 1111,  326,
      727,  728,  326,  729,  326, 1242, 1242,  326,  326,  327,
      731,  326,  326, 1113,  730,  326, 1125, 1124,  327,  327,
     1242, 1242,  735,  327,  734,  327, 1034,  327,  736,  327,
      732,  326, 1045,  733,  326,  327,  568,  533,  569,  568,
      327, 1108, 1035,  326,  327,  234,  326,  737,  327,  738,
      569,  533,  569,  569,  739,  652,  651,  739,  741,  326,
      326,  741,  326,  326, 1242,  326,  326,  327,  326,  326,
     1242, 1115,  375,  651,  652,  651,  651, 1123, 1242,  327,
      615,  616,  617,  615, 1242,  820, 1122,  740,  820,  570,

      327, 1242, 1161,  939,  327,  327,  327,  617,  616,  617,
      617,  327,  327,  743,  651,  652,  651,  651,  744, 1117,
      742,  745,  660,  661,  662,  660,  434,  662,  661,  662,
      662,  663,  664,  665,  663,  665,  664,  665,  665, 1121,
      267,  326,  267,  267,  326, 1242,  267,  821,  267,  267,
      267, 1242,  267,  267,  267, 1242,  267,  267, 1242, 1242,
      823,  862,  824, 1242,  267,  940,  267,  267,  267, 1160,
      267,  267, 1242, 1242,  941,  257,  268,  327, 1043, 1118,
      825,  828,  268, 1165,  257,  827,  268,  826, 1120,  267,
      268,  267,  267,  267, 1163,  267,  267, 1119, 1242,  267,

      268,  267,  267, 1109,  268,  267, 1242,  267,  267,  829,
     1067,  830,  831,  267,  820,  267,  267,  820,  267, 1110,
      267,  267, 1066, 1159,  267,  268,  267,  267,  267,  268,
      267,  267, 1242,  820,  942,  268,  820,  832, 1242,  833,
      949,  268,  834,  267, 1242,  267,  267, 1242,  267,  268,
      267,  267, 1065, 1242,  268,  835,  267,  836,  267,  267,
      268, 1162, 1064,  837,  268,  267,  821,  267,  267,  267,
     1063,  267,  267, 1062, 1061,  267,  838,  267,  267,  268,
      839, 1166,  841,  840,  268,  821, 1060,  267,  842,  267,
      267,  267,  268,  267,  267,  267, 1059,  267,  267, 1242,

      267,  268,  267,  267,  326,  268,  267,  326,  267,  267,
      267,  268,  267,  267,  267, 1058,  267,  267,  843,  848,
      863,  844,  845,  268,  846, 1242, 1130,  268,  847, 1130,
      267,  268,  267,  267, 1230,  267,  268,  267,  267, 1200,
      327,  267,  268,  267,  267,  267,  268,  267,  267,  850,
      268, 1242, 1057,  267,  851,  267,  267,  267,  852,  267,
      267, 1242,  849,  951,  855, 1201,  268,  699,  652,  699,
      699,  268, 1242,  267,  853,  267,  267,  268, 1131, 1202,
      701,  268,  267,  701,  267,  854,  267,  267,  267,  268,
      267,  267,  267,  268,  267,  267, 1056,  860,  326,  267,

      860,  326, 1242,  268,  326, 1242, 1055,  326,  326,  268,
      326,  326, 1222,  326,  326, 1242,  268,  326,  856,  326,
      268,  867,  326,  326,  268,  866,  326,  870,  268, 1203,
      859,  865,  702,  268,  327, 1242,  857,  952,  858,  868,
      327,  869,  871, 1223,  327,  326,  327, 1054,  326,  861,
      327,  326, 1051,  326,  326,  327,  326,  326,  326,  327,
      326,  326,  326, 1050,  326,  326,  326,  326, 1242,  326,
      954,  872, 1049,  326,  326,  873,  326,  326,  876,  880,
      326,  327,  326,  326,  874,  326,  875,  327,  878,  327,
      877,  879, 1048,  327,  327,  881,  326, 1047,  327,  326,

      327,  326,  327,  326,  326,  882,  326,  884,  326,  327,
      327,  326,  326,  963,  326,  326,  327,  326,  327,  885,
      326,  886, 1242,  326, 1047,  890,  883,  887,  326,  962,
      326,  326,  327,  326,  889,  326, 1242,  327,  326,  327,
      326,  891,  326,  326,  327,  326,  888, 1242,  327, 1048,
      327,  892,  739,  652,  651,  739,  327,  741,  326,  961,
      741,  326,  326,  893,  327,  326,  327,  326,  960,  959,
      326,  327,  899,  958, 1234,  899,  327, 1242,  327, 1049,
      267,  957,  267,  267, 1242,  956, 1051,  895,  327,  267,
      894,  267,  267,  327,  327, 1242,  955,  267,  327,  267,

      267,  954, 1242,  327, 1056,  898,  953,  965,  327,  742,
      896,  964,  897,  952,  951,  267,  268,  267,  267,  267,
     1173,  267,  267, 1173,  900,  268, 1238,  967,  966, 1242,
      950, 1057,  968,  268,  267,  949,  267,  267,  267,  948,
      267,  267, 1242,  267, 1058,  267,  267,  267,  947,  267,
      267,  268, 1242,  944, 1061,  268,  970,  943,  267,  969,
      267,  267,  267,  942,  267,  267,  267,  941,  267,  267,
      268,  971, 1174,  940,  268,  972,  939,  938,  267,  268,
      267,  267,  267,  268,  267,  267,  267,  937,  267,  267,
      267,  973,  267,  267,  268,  974,  936,  976,  268,  975,

      935,  267,  268,  267,  267,  267,  934,  267,  267,  267,
      933,  267,  267,  267,  268,  267,  267,  978,  268,  932,
      977,  267,  268,  267,  267,  267,  268,  267,  267, 1242,
     1242, 1120, 1125,  979, 1242,  980, 1127,  268,  982,  931,
      267,  268,  267,  267,  267,  268,  267,  267,  267,  268,
      267,  267,  267,  981,  267,  267,  267,  268,  267,  267,
      267,  268,  267,  267,  267,  984,  267,  267,  267,  985,
      267,  267,  983,  986,  822,  819,  268,  987,  818,  267,
      268,  267,  267,  267,  268,  267,  267,  267,  268,  267,
      267, 1130,  268,  988, 1130, 1176,  268,  817, 1176,  267,

      268,  267,  267,  267,  268,  267,  267,  816,  815,  990,
      267,  989,  267,  267,  267,  268,  267,  267,  860,  268,
      267,  860,  267,  268,  267,  267,  326,  326,  814,  326,
      326,  991, 1242,  326, 1169,  268,  326,  813,  812,  268,
      992,  326,  811, 1131,  326,  997,  268, 1177,  993,  810,
      268,  994,  326,  326,  268,  326,  326,  996,  268,  809,
      808,  326,  327,  327,  326,  998, 1000,  807,  806,  327,
      861,  999,  326,  326,  995,  326,  326,  327,  326,  805,
      326,  326, 1001,  326, 1242, 1002, 1171,  326,  327,  327,
      326, 1003,  326, 1004,  804,  326,  326,  327,  326,  326,

     1005,  326,  803,  326,  326, 1006,  326,  326,  327,  327,
      326, 1007,  326,  326,  327,  326,  327,  802,  326,  326,
     1010,  326,  326,  327,  801,  800,  326, 1008,  327,  326,
      799,  798,  327, 1009,  327,  326, 1011,  797,  326,  327,
      327, 1242, 1012, 1204,  326,  796,  327,  326,  327,  326,
      326, 1013,  326,  326,  327,  327,  326, 1014, 1015,  326,
     1018,  326,  327, 1016,  326,  326,  795,  326,  326, 1017,
      326,  327,  326,  326, 1019,  326,  326, 1242,  326, 1206,
      327,  326, 1020,  794,  326,  327,  327,  326,  326,  793,
      326,  326,  327,  326, 1242,  326, 1224,  327,  326, 1022,

      792,  327,  899,  327, 1021,  899,  791,  326,  327,  327,
      326, 1242,  326, 1239,  327,  326,  267,  790,  267,  267,
      327,  789, 1023,  788,  327, 1024,  327,  326, 1025, 1068,
      326,  327, 1026,  267,  787,  267,  267,  267,  327,  267,
      267,  786,  267,  327,  267,  267, 1069,  267,  327,  267,
      267,  785,  268, 1173,  900, 1070, 1173,  784,  267, 1027,
      267,  267,  267,  327,  267,  267,  783,  659,  267,  268,
      267,  267,  267,  268,  267,  267,  658,  267,  268,  267,
      267,  657,  267,  268,  267,  267,  267,  475,  267,  267,
     1071,  656,  653,  267,  268,  267,  267, 1176,  268,  267,

     1176,  267,  267,  650,  268, 1174, 1072,  326,  268,  267,
      326,  267,  267,  268,  267, 1073,  267,  267,  268,  649,
     1088,  267,  268,  267,  267,  267,  648,  267,  267,  268,
      267, 1074,  267,  267, 1077,  268, 1076, 1075, 1078,  267,
      647,  267,  267,  327,  267,  268,  267,  267,  646, 1177,
      268,  267, 1079,  267,  267,  643,  267,  268,  267,  267,
      267,  268,  267,  267,  642,  267,  268,  267,  267,  267,
      641,  267,  267,  640, 1080,  268,  267,  639,  267,  267,
      268,  267, 1082,  267,  267,  638,  267,  268,  267,  267,
     1081,  637,  268,  636, 1083,  267,  268,  267,  267,  326,

      635,  268,  326,  634,  267,  268,  267,  267,  267,  631,
      267,  267,  268,  326,  630,  326,  326,  268,  326,  629,
      326,  326,  268,  326,  326,  628, 1089,  627, 1090,  326,
     1084,  268,  326,  626, 1086,  327, 1085,  625,  326,  326,
      268,  326,  326,  326,  268,  326,  326,  326,  326,  327,
      326,  327, 1091, 1087,  624,  623,  327,  327, 1092,  326,
      326,  622,  326,  326,  326,  327,  621,  326,  326, 1096,
      326,  326,  620,  326,  327,  327, 1093, 1097,  619,  327,
      618,  327,  443,  327, 1242,  326,  326, 1095,  326,  326,
      326,  326, 1094,  326,  326,  327,  327,  263, 1098, 1099,

      327,  484,  326,  483,  327,  326,  327,  326,  257, 1100,
      326,  326,  326,  326,  326,  326,  326,  326,  253,  482,
      326,  327,  327,  249, 1102,  326,  327,  327,  326,  244,
     1103,  481, 1101,  326,  326,  480,  326,  326,  327,  267,
      479,  267,  267,  327,  478,  477,  476,  327,  327,  327,
      243,  238,  267,  327,  267,  267,  267,  237,  267,  267,
      236,  327, 1104,  267, 1106,  267,  267, 1105,  474,  327,
      327,  267,  471,  267,  267,  268, 1133,  267,  470,  267,
      267,  267, 1107,  267,  267,  469,  468,  267,  268,  267,
      267,  267,  268,  267,  267,  267,  467,  267,  267,  268,

      466,  463,  462, 1135,  461, 1134,  267,  268,  267,  267,
      460,  459, 1136,  268,  458,  457, 1137,  268,  267,  454,
      267,  267,  267,  268,  267,  267,  453,  268,  452,  451,
      267,  268,  267,  267,  267, 1138,  267,  267,  267,  450,
      267,  267,  268,  267,  447,  267,  267,  267,  446,  267,
      267, 1140,  326, 1141,  268,  326,  445, 1143,  268,  267,
     1143,  267, 1139,  267,  267,  326,  268,  444,  326,  326,
      268,  443,  326,  196,  268,  326,  196,  326,  326,  268,
      326,  326,  326,  268,  326,  326, 1142,  193,  327,  326,
     1146,  326,  326,  268,  326,  326,  326,  268,  326,  326,

     1145,  327, 1242, 1148,  326,  327,  265,  326,  261, 1144,
     1147,  327,  326,  327, 1149,  326, 1150,  327,  327,  326,
      326,  326,  326,  326,  326,  327,  326,  327,  258,  326,
      257,  327,  327, 1151, 1153,  326, 1154,  253,  326, 1156,
      327,  249, 1156,  326, 1152,  244,  326, 1130,  327,  267,
     1130,  267,  267,  243,  238,  327,  327,  327, 1242,  237,
      236,  267,  327,  267,  267,  267,  225,  267,  267,  224,
      267,  327,  267,  267, 1155,  327,  219,  218,  267,  327,
      267,  267, 1158, 1180,  326,  268, 1178,  326,  217,  206,
     1179, 1157,  267,  203,  267,  267, 1181,  268,  199, 1131,

      267,  268,  267,  267,  196,  267,  268,  267,  267,  267,
      193,  267,  267, 1182,  268, 1184,  191,  267, 1184, 1143,
      327,  267, 1143,  267, 1242,  267,  267, 1187,  268,  267,
     1187, 1242,  326, 1242, 1242,  326,  268,  326, 1242, 1173,
      326,  268, 1173, 1242, 1242,  268,  326, 1183, 1242,  326,
     1242,  268, 1242,  326, 1242,  268,  326, 1189,  326,  268,
     1242,  326, 1190,  268, 1192, 1242, 1191, 1185,  327,  326,
     1242, 1144,  326,  327,  326, 1186, 1242,  326,  326, 1188,
     1242,  326,  327, 1195, 1242, 1156, 1195, 1193, 1156,  327,
      326, 1174, 1198,  326,  327, 1198, 1176, 1242,  267, 1176,

      267,  267, 1242, 1242, 1242,  327, 1242, 1242, 1242, 1242,
      327, 1210, 1242, 1242,  327,  267, 1194,  267,  267,  327,
      267,  327,  267,  267, 1242, 1242,  327,  267,  327,  267,
      267, 1242, 1242, 1211,  268, 1196,  267, 1157,  267,  267,
     1212, 1242, 1197,  267, 1199,  267,  267, 1184, 1177,  267,
     1184,  268,  267, 1242,  267,  267,  268,  267,  326,  267,
      267,  326, 1187,  268,  267, 1187,  267,  326,  267,  267,
      326, 1216,  268,  326,  326,  326,  326,  326,  326,  268,
     1242,  326, 1213,  268,  326, 1217, 1195, 1218,  268, 1195,
     1242, 1242,  326,  268,  327,  326, 1242,  326,  268, 1185,

      326, 1242,  268,  327, 1214, 1198, 1242, 1242, 1198,  327,
      327,  327,  326, 1242, 1188,  326,  326,  327, 1215,  326,
     1219, 1242,  327,  267, 1242,  267,  267,  267,  327,  267,
      267, 1242,  267,  327,  267,  267,  326, 1242, 1196,  326,
     1226,  327, 1242,  267, 1220,  267,  267,  267,  327,  267,
      267,  267,  327,  267,  267, 1242, 1242, 1199,  326,  268,
     1242,  326,  326,  268, 1221,  326,  326,  326,  268,  326,
      326, 1228,  327,  267,  326,  267,  267,  326,  267,  268,
      267,  267,  326,  268, 1242,  326, 1242,  268,  267, 1227,
      267,  267,  326,  326,  327,  326,  326,  267,  327,  267,

      267, 1242,  327,  327,  267, 1242,  267,  267, 1229,  268,
      327, 1242,  326, 1242,  268,  326, 1242, 1240,  327, 1242,
     1242, 1242, 1242, 1242,  268, 1241, 1242, 1232,  327,  327,
     1236, 1233, 1242,  268, 1237, 1242, 1242, 1242, 1242, 1242,
      268, 1242, 1242, 1242, 1242, 1242, 1242, 1242,  327,   56,
       56,   56,   56,   56,   56,   61,   61,   61,   61,   61,
       61,   68,   68,   68,   68,   68,   68,   73,   73,   73,
       73,   73,   73,  184,  184,  184,  184,  184,  184,  192,
      192, 1242, 1242,  192,  192,  234,  234, 1242,  234,  234,
      234,  245,  245,  245,  245,  245,  245,  248, 1242, 1242,

     1242,  248,  248,  250,  250,  250,  250,  250,  250,  256,
      256, 1242, 1242,  256,  256,  262,  262,  262,  262,  262,
      262,  266,  266, 1242,  266,  266,  266,  274,  274, 1242,
      274,  274,  274,  313,  313, 1242,  313,  313,  313,  325,
      325, 1242, 1242, 1242,  325,  333,  333, 1242, 1242,  333,
      333,  373,  373, 1242,  373,  373,  373,  432,  432, 1242,
     1242, 1242,  432,   17, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,

     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242
    } ;

static yyconst flex_int16_t yy_chk[4220] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    7,    7,    2,    2,
        3,    3,    3,    3,    5,    5,    6,    6,    2,    4,
        4,    4,    4,    4,    8,    8,   15,   15,   15,   15,
       19,    2,   37,   19,   33,   15,   36,    4,   24,   24,
       26,   26,   28,   28,    2,   33,   37,   36,   31,    2,

       43,    2,   31,    2,   71,   31,    2,    2,   43,   71,
     1261,    5,   15,    6,   73,   73,    5,    4,    6,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   10,   38,   53,   10,   10,   16,
       16,   16,   16,   35,   42,   49,   35,   10,   16,   54,
       35,   54,   38,   35,   67,  164,   42,  426,   53,   49,

       10,   59,   59,   59,   64,   64,   64,   64,  157,  157,
      158,  158,  162,   10,  174,   16,  164, 1235,   10,  162,
       10,  174,   10,  426,   67,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   12,  169,  171,   12,   12,   76,  176,   76,
       76,   77,   77,   77,   77,   12,   79,   79,   79,   79,

      161,  160,  169,  163,  165,  171,  170,  400,   12,  160,
      161,  209,  165,  163,  161,  165,  176,  161,  400,  165,
      170,   12,  165,   76,  163,  209,   12,   77,   12,  203,
       12,  203,   79,   12,   12,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       14,  179,  255,   14,   14,   80,  407,   80,   80,   81,

      180,   81,   81,   14,  115, 1231,   81,  115,   82,  181,
       82,   82,   83,  407,   83,   83,   14,  195,  195,   82,
       82,   84,  255,   84,   84,   85,  179,   85,   85,   14,
      405,   80,   84,   84,   14,   81,   14,   85,   14,  180,
      115,   14,   14,   46,   82,  181,   46,   46,   83,  405,
      119,  166,   86,  119,   86,   86,   46,   84,  232,  166,
      232,   85, 1225,   86,   86,   87,  408,   87,   87,  173,
      166,   88,  173,   88,   88,   89,  167,   89,   89,  167,
      173,   90,   46,   90,   90,  408,  119,   46,   86,   46,
       88,  198,  198,  167,   46,   46,   89,  235,  235,   90,

       89,   87,   91,   89,   91,   91,  168,   88,  588,  168,
       92,   89,   92,   92,  262,  262,  190,   90,   93,  190,
       93,   93,   94,   91,   94,   94,  168,  224,  588,   95,
      224,   95,   95,   97,   91,   97,   97,   93,   91,  172,
       93,   94,   92,   95,   93,  410,   92,   93,   96,  172,
       96,   96,   94,   98,   93,   98,   98,   95,   94,  240,
      410,  172,   96,   97,   99,   95,   99,   99,  126,   97,
      100,  126,  100,  100,  102, 1207,  102,  102,   98,   96,
      101,  240,  101,  101,   96,  103,  103,  103,  103,   98,
      395,  100,  102,  395,  101,  104,   99,  104,  104,  427,

       99,  601,  101,  100,  126,  106,  100,  106,  106,  601,
      102,  105,  105,  105,  105,  107,  101,  107,  107,  403,
      127,  103,  108,  127,  108,  108,  109,  427,  109,  109,
      110,  104,  110,  110,  104,  111,  108,  111,  111,  127,
      403,  106,  112,  129,  112,  112,  129,  105,  217,  394,
      108,  107,  113,  217,  113,  113,  127,  114,  108,  114,
      114,  129,  109,  394,  178,  416,  110,  178,  112,  416,
      183,  111,  109, 1205,  116,  116,  116,  116,  112,  129,
      110,  178,  111,  118,  118,  118,  118,  182,  113,  113,
      112,  113,  120,  114,  121,  120,  183,  121,  183,  120,

      123,  120,  182,  123,  124,  121,  121,  124,  259,  114,
      116,  123,  123,  259,  125,  396,  124,  125,  128,  118,
      130,  128,  396,  130,  182,  125,  125, 1177,  120,  131,
      121,  141,  131,  398,  141,  399,  123,  392,  392,  128,
      124,  130,  399,  128,  132,  133,  128,  132,  133,  141,
      125,  398,  130,  398,  128,  134,  130,  135,  134,  136,
      135,  131,  136,  132,  133,  131,  132,  141,  411,  134,
      132,  135,  397,  132,  137,  133,  138,  137,  406,  138,
      132,  133,  139,  134,  140,  139,  397,  140,  135,  136,
      411,  134,  406,  135,  143,  136,  414,  143,  140,  137,

      393,  393,  145,  139,  145,  145,  140,  414,  138,  614,
      137,  145,  138,  146,  148,  139,  146,  148,  139, 1174,
      140,  142,  142,  142,  142,  144,  144,  144,  144,  149,
      143,  147,  149,  143,  147,  401,  150,  151,  145,  150,
      151,  152,  401,  614,  152,  147,  409,  417,  153,  146,
      148,  153,  154,  154,  154,  154,  417,  142,  422,  147,
      148,  144,  409,  151,  415,  149,  429,  147,  156,  156,
      156,  156,  150,  151,  247,  247,  247,  152,  152,  149,
      152,  429,  585,  150,  153,  151,  415,  422,  154,  175,
      175,  175,  175,  177,  177,  177,  177,  585,  184,  413,

      153,  184,  413,  429,  156,  185,  185,  185,  185,  187,
      187,  187,  187,  189,  189,  189,  189,  252,  252,  252,
      261,  261,  261,  261,  266,  402,  266,  266,  267,  177,
      267,  267,  402,  412,  184,  268,  268,  268,  268,  412,
      274,  185,  274,  274,  412,  187,  425,  274,  581,  189,
      269,  269,  269,  269,  271,  271,  271,  271, 1172,  276,
      266,  276,  276,  418,  267,  272,  272,  272,  272,  581,
      458,  268,  275,  261,  275,  275,  274,  418,  425,  275,
      277,  277,  277,  277,  458,  325,  269,  277,  325,  278,
      271,  278,  278,  582,  279,  276,  279,  279,  582,  755,

      280,  278,  280,  280,  430,  279,  279,  281,  275,  281,
      281,  282,  280,  282,  282,  283,  277,  283,  283,  281,
      755,  325,  282,  282,  284,  278,  284,  284, 1170,  580,
      279,  285,  326,  285,  285,  326,  280,  430,  284,  286,
      283,  286,  286,  281,  419,  428,  580,  282,  428,  285,
      287,  283,  287,  287,  288,  419,  288,  288,  419,  290,
      284,  290,  290,  289,  286,  289,  289,  285,  326,  609,
      779,  291,  288,  291,  291,  286,  578,  290,  424,  287,
      292,  287,  292,  292,  335,  289,  287,  335,  431,  291,
      288,  293,  578,  293,  293,  290,  424,  424,  294,  289,

      294,  294,  609,  587,  779,  293,  295,  291,  295,  295,
      587,  296,  292,  296,  296,  297,  292,  297,  297,  293,
      335,  298,  469,  298,  298,  469,  431,  293,  294,  583,
      299,  295,  299,  299,  294,  300,  612,  300,  300,  296,
      583,  301,  295,  301,  301,  297,  477,  296,  298,  477,
      302,  297,  302,  302,  612,  592,  299,  298,  301,  303,
      592,  303,  303,  301,  302,  594,  299,  304,  300,  304,
      304,  300,  305, 1035,  305,  305,  306,  301,  306,  306,
      307,  303,  307,  307, 1035,  594,  302,  305,  308,  577,
      308,  308,  577,  589,  404,  303,  306,  404,  477,  311,

      304,  311,  311,  304,  313,  307,  313,  313,  305,  589,
      308,  404,  306,  308,  595,  590,  307,  309,  309,  309,
      309,  595,  584,  314,  308,  314,  314,  315,  315,  315,
      315,  316,  590,  316,  316,  311,  584,  593,  596,  311,
      313,  317,  596,  317,  317,  318,  603,  318,  318,  319,
      593,  319,  319,  309,  320,  579,  320,  320,  579,  314,
      316,  316,  322,  315,  322,  322,  603,  316,  320,  321,
     1168,  321,  321,  323, 1167,  323,  323,  317,  605,  597,
      343,  318,  318,  343,  317,  319,  597,  605,  319,  324,
      320,  324,  324,  586,  343,  321,  586,  598,  322,  327,

      327,  327,  327,  599,  598,  321,  322,  604,  599,  323,
      328,  328,  328,  328,  604,  613,  343,  321,  330,  330,
      330,  330,  323,  746, 1131,  324,  331,  331,  331,  331,
      333,  334,  746,  333,  334,  327,  756,  333,  334,  333,
      334,  336,  336,  336,  336,  611,  328,  613,  336,  337,
      336,  756,  337,  338,  330,  342,  338,  339,  342,  340,
      339,  337,  340,  606,  338,  338,  333,  334,  606,  339,
      341,  340,  344,  341,  600,  344,  345,  336,  611,  345,
      342,  341,  341,  348,  346,  337,  348,  346,  600,  338,
      344,  342,  750,  339,  351,  340,  347,  351,  748,  347,

      349,  345,  750,  349,  350,  348,  341,  350,  344,  753,
      757,  607,  345,  346,  347,  346,  753,  748,  349,  348,
      346,  352,  350,  757,  352,  353,  351,  751,  353,  751,
      351,  354,  347, 1128,  354,  352,  349,  607,  355,  356,
      350,  355,  356,  357,  359,  358,  357,  359,  358,  352,
      361,  360,  758,  361,  360,  353,  354,  352,  759,  363,
      362,  353,  363,  362,  361,  767,  355,  354,  360,  356,
      357,  358,  758,  360,  355,  356,  759,  359,  747,  357,
      359,  358,  362,  747,  767,  364,  361,  360,  364,  776,
      365,  366,  363,  365,  366,  363,  362,  749,  367,  776,

      364,  367,  368,  368,  368,  368,  370,  370,  370,  370,
      365,  371,  591, 1126,  371,  591,  366,  904,  761,  749,
      367,  364,  373,  367,  373,  373,  365,  366,  752,  591,
      374,  373,  374,  374,  367,  761,  904,  752,  368,  374,
      375,  375,  375,  375,  754,  376,  754,  371,  376,  375,
      377,  371,  378,  377,  380,  378,  379,  380,  373,  379,
      382,  381,  383,  382,  381,  383,  374,  384,  380,  389,
      384,  389,  389,  778,  376,  376,  375,  385,  385,  385,
      385,  376,  387,  387,  387,  387,  377,  381,  378,  378,
      380,  432,  379,  377,  432,  379,  382,  381,  383,  388,

      388,  388,  388,  384,  382,  389,  764,  433,  764,  381,
      433,  383,  778,  385,  420,  420,  420,  420,  387,  434,
      434,  434,  434,  435,  435,  435,  435,  432,  437,  437,
      437,  437,  438,  438,  438,  438,  439,  766,  439,  439,
      762,  926,  768,  433,  440,  440,  440,  440,  442,  442,
      442,  442,  765,  762,  765,  434,  926,  766,  768,  435,
      475,  475,  475,  475,  437,  483,  483,  483,  483,  760,
      763,  771,  439,  484,  484,  484,  484,  763,  760,  771,
      440,  485,  485,  485,  485,  487,  487,  487,  487,  488,
      488,  488,  488,  490,  490,  490,  490,  491,  491,  491,

      491,  769,  780,  492,  491,  492,  492,  493,  769,  493,
      493,  494,  602,  494,  494,  492,  770,  495,  483,  495,
      495,  493,  774,  770,  774,  488,  484,  496, 1124,  496,
      496,  495,  602,  491,  485,  602, 1123,  773,  494,  492,
      773,  780,  497,  493,  497,  497,  498,  494,  498,  498,
      772,  928,  777,  495,  499,  496,  499,  499,  500,  799,
      500,  500,  498,  496,  775,  501,  775,  501,  501,  777,
      502,  772,  502,  502,  497,  799,  499,  503,  497,  503,
      503,  928,  498,  500,  502,  504,  540,  504,  504,  540,
      499,  501, 1122,  781,  500,  503,  505,  902,  505,  505,

      506,  501,  506,  506,  902,  507,  502,  507,  507,  508,
      901,  508,  508,  503,  540,  509,  504,  509,  509,  507,
      781,  504,  540,  505,  510,  508,  510,  510,  506, 1121,
      901,  547,  505,  507,  547,  511,  506,  511,  511,  509,
      513,  507,  513,  513,  512,  508,  512,  512,  903,  547,
      903,  509,  906,  511,  514,  510,  514,  514,  513,  512,
      510,  515,  906,  515,  515,  914,  516,  547,  516,  516,
      916,  511,  514,  913,  922,  536,  513,  515,  536,  517,
      512,  517,  517,  518,  914,  518,  518,  536,  922,  916,
      514,  516,  519,  913,  519,  519,  944,  515,  517, 1116,

     1116,  544,  516,  520,  544,  520,  520,  521,  924,  521,
      521,  536,  944,  538,  518,  517,  538,  518,  905,  518,
      905,  520,  522,  519,  522,  522,  544,  521,  519,  523,
      924,  523,  523,  524,  524,  524,  524,  544,  522,  520,
      538,  917,  930,  521,  525,  525,  525,  525,  526,  538,
      526,  526,  527,  537,  527,  527,  537,  528,  522,  528,
      528,  529,  917,  529,  529,  523,  523,  537,  930,  524,
      530, 1043,  530,  530,  531,  541,  531,  531,  541,  907,
      525,  907,  539,  610,  526,  539,  610,  919,  527,  537,
      529,  925,  526,  528,  610,  654,  539,  529,  654, 1067,

      708,  528,  545,  708,  527,  545,  530,  541,  919, 1043,
      531,  541,  925,  530,  532,  532,  532,  532,  539,  531,
      534,  534,  534,  534,  535,  535,  535,  535,  545,  542,
      708,  535,  542,  535,  543,  610,  708,  543,  545,  546,
      548,  549,  546,  548,  549,  542,  550,  654,  552,  550,
      532,  552,  551,  546,  553,  551,  543,  553,  554, 1040,
      535,  554, 1066, 1064,  552,  542,  551, 1063,  549,  555,
      543,  548,  555, 1040,  550,  546,  548,  549,  553,  908,
      551,  908,  550,  556,  552, 1062,  556,  555,  551,  554,
      553, 1034,  557,  558,  554,  557,  558,  559,  556,  560,

      559,  561,  560,  563,  561,  555,  563, 1060, 1034,  562,
      557,  558,  562,  559,  564,  929, 1039,  564,  565,  556,
      561,  565,  567, 1039,  560,  567, 1059, 1055,  557,  558,
     1031,  915,  564,  559,  563,  560,  915,  561,  565,  563,
      562,  566,  929,  562,  566,  562,  568,  568,  568,  568,
      564, 1031,  915,  571,  565,  568,  571,  566,  567,  567,
      569,  569,  569,  569,  570,  570,  570,  570,  572,  573,
      574,  572,  573,  574, 1042,  575,  576,  566,  575,  576,
     1044, 1042,  568,  608,  608,  608,  608, 1054, 1111,  571,
      615,  615,  615,  615,  608,  658, 1053,  571,  658,  574,

      570,  909, 1111,  909,  572,  573,  574,  617,  617,  617,
      617,  575,  576,  573,  651,  651,  651,  651,  575, 1044,
      572,  576,  660,  660,  660,  660,  615,  662,  662,  662,
      662,  663,  663,  663,  663,  665,  665,  665,  665, 1052,
      666,  706,  666,  666,  706,  927,  667,  658,  667,  667,
      668, 1045,  668,  668,  669, 1117,  669,  669, 1110, 1046,
      666,  706,  667,  910,  670,  910,  670,  670,  671, 1110,
      671,  671,  911, 1114,  911,  660,  666,  706,  927, 1045,
      668,  671,  667, 1117,  663,  670,  668,  669, 1050,  672,
      669,  672,  672,  673, 1114,  673,  673, 1046, 1033,  674,

      670,  674,  674, 1033,  671,  675, 1109,  675,  675,  672,
      963,  673,  674,  676,  820,  676,  676,  820,  677, 1033,
      677,  677,  961, 1109,  678,  672,  678,  678,  679,  673,
      679,  679,  912,  782,  912,  674,  782,  675,  918,  676,
      918,  675,  677,  680,  782,  680,  680, 1112,  681,  676,
      681,  681,  960, 1119,  677,  678,  682,  679,  682,  682,
      678, 1112,  959,  680,  679,  683,  820,  683,  683,  684,
      958,  684,  684,  957,  956,  685,  681,  685,  685,  680,
      682, 1119,  684,  683,  681,  782,  955,  686,  685,  686,
      686,  687,  682,  687,  687,  688,  953,  688,  688, 1223,

      691,  683,  691,  691,  707,  684,  689,  707,  689,  689,
      690,  685,  690,  690,  698,  950,  698,  698,  686,  691,
      707,  687,  688,  686,  689, 1159, 1065,  687,  690, 1065,
      692,  688,  692,  692, 1223,  693,  691,  693,  693, 1159,
      707,  694,  689,  694,  694,  695,  690,  695,  695,  693,
      698, 1160,  948,  696,  694,  696,  696,  697,  695,  697,
      697,  920,  692,  920,  698, 1160,  692,  699,  699,  699,
      699,  693, 1162,  700,  696,  700,  700,  694, 1065, 1162,
      701,  695,  701,  701,  702,  697,  702,  702,  703,  696,
      703,  703,  704,  697,  704,  704,  947,  705,  709,  705,

      705,  709, 1164,  699,  710, 1201,  946,  710,  711,  700,
      715,  711, 1201,  715,  714, 1203,  701,  714,  700,  712,
      702,  711,  712,  713,  703,  710,  713,  714,  704, 1164,
      704,  709,  701,  705,  709,  921,  702,  921,  703,  712,
      710,  713,  715, 1203,  711,  716,  715,  945,  716,  705,
      714,  717,  943,  718,  717,  712,  718,  719,  720,  713,
      719,  720,  721,  936,  722,  721,  724,  722,  923,  724,
      923,  716,  934,  723,  726,  717,  723,  726,  720,  724,
      728,  716,  725,  728,  718,  725,  719,  717,  722,  718,
      721,  723,  932,  719,  720,  725,  727,  931,  721,  727,

      722,  729,  724,  730,  729,  726,  730,  728,  731,  723,
      726,  731,  734,  822,  732,  734,  728,  732,  725,  729,
      733,  730, 1028,  733, 1028,  734,  727,  731,  735,  821,
      736,  735,  727,  736,  733,  737, 1230,  729,  737,  730,
      738,  735,  740,  738,  731,  740,  732, 1029,  734, 1029,
      732,  736,  739,  739,  739,  739,  733,  741,  742,  819,
      741,  742,  743,  737,  735,  743,  736,  744,  818,  816,
      744,  737,  745,  815, 1230,  745,  738, 1030,  740, 1030,
      823,  814,  823,  823, 1032,  813, 1032,  740,  739,  824,
      738,  824,  824,  741,  742, 1234,  810,  826,  743,  826,

      826,  809, 1036,  744, 1036,  744,  808,  824,  745,  741,
      742,  823,  743,  807,  806,  825,  823,  825,  825,  827,
     1129,  827,  827, 1129,  745,  824, 1234,  826,  825, 1037,
      805, 1037,  827,  826,  828,  804,  828,  828,  829,  803,
      829,  829, 1038,  830, 1038,  830,  830,  831,  800,  831,
      831,  825, 1041,  798, 1041,  827,  830,  797,  832,  829,
      832,  832,  833,  796,  833,  833,  837,  795,  837,  837,
      828,  832, 1129,  794,  829,  833,  793,  792,  834,  830,
      834,  834,  835,  831,  835,  835,  836,  790,  836,  836,
      838,  834,  838,  838,  832,  835,  789,  837,  833,  836,

      787,  839,  837,  839,  839,  840,  786,  840,  840,  841,
      785,  841,  841,  842,  834,  842,  842,  839,  835,  784,
      838,  843,  836,  843,  843,  844,  838,  844,  844, 1108,
     1113, 1108, 1113,  839, 1115,  840, 1115,  839,  844,  783,
      845,  840,  845,  845,  851,  841,  851,  851,  848,  842,
      848,  848,  846,  843,  846,  846,  847,  843,  847,  847,
      850,  844,  850,  850,  849,  846,  849,  849,  852,  847,
      852,  852,  845,  848,  659,  657,  845,  849,  656,  853,
      851,  853,  853,  854,  848,  854,  854,  855,  846,  855,
      855, 1130,  847,  850, 1130, 1132,  850,  655, 1132,  856,

      849,  856,  856,  857,  852,  857,  857,  653,  650,  854,
      858,  853,  858,  858,  859,  853,  859,  859,  860,  854,
      860,  860,  861,  855,  861,  861,  862,  863,  649,  862,
      863,  855, 1161,  867, 1161,  856,  867,  648,  647,  857,
      856,  865,  646, 1130,  865,  863,  858, 1132,  858,  645,
      859,  859,  864,  866,  860,  864,  866,  862,  861,  644,
      643,  868,  862,  863,  868,  864,  866,  642,  641,  867,
      860,  865,  869,  870,  861,  869,  870,  865,  871,  640,
      872,  871,  868,  872, 1163,  869, 1163,  873,  864,  866,
      873,  871,  874,  872,  639,  874,  876,  868,  875,  876,

      873,  875,  638,  877,  878,  874,  877,  878,  869,  870,
      880,  875,  879,  880,  871,  879,  872,  637,  881,  882,
      878,  881,  882,  873,  636,  635,  884,  876,  874,  884,
      634,  633,  876,  877,  875,  887,  878,  632,  887,  877,
      878, 1200,  879, 1200,  883,  631,  880,  883,  879,  889,
      885,  882,  889,  885,  881,  882,  886,  883,  884,  886,
      887,  888,  884,  885,  888,  890,  630,  891,  890,  886,
      891,  887,  892,  893,  888,  892,  893, 1202,  894, 1202,
      883,  894,  889,  629,  895,  889,  885,  895,  896,  628,
      897,  896,  886,  897, 1222,  898, 1222,  888,  898,  893,

      627,  890,  899,  891,  892,  899,  626,  900,  892,  893,
      900, 1238,  998, 1238,  894,  998,  964,  625,  964,  964,
      895,  624,  894,  623,  896,  895,  897, 1000,  897,  964,
     1000,  898,  898,  965,  622,  965,  965,  966,  899,  966,
      966,  621,  967,  900,  967,  967,  965,  968,  998,  968,
      968,  620,  964, 1173,  899,  967, 1173,  619,  969,  900,
      969,  969,  970, 1000,  970,  970,  618,  482,  971,  965,
      971,  971,  972,  966,  972,  972,  481,  973,  967,  973,
      973,  480,  974,  968,  974,  974,  975,  479,  975,  975,
      969,  478,  476,  976,  969,  976,  976, 1176,  970,  977,

     1176,  977,  977,  474,  971, 1173,  976,  996,  972,  978,
      996,  978,  978,  973,  979,  977,  979,  979,  974,  473,
      996,  980,  975,  980,  980,  981,  472,  981,  981,  976,
      982,  977,  982,  982,  980,  977,  979,  978,  981,  983,
      471,  983,  983,  996,  984,  978,  984,  984,  470, 1176,
      979,  985,  983,  985,  985,  468,  986,  980,  986,  986,
      987,  981,  987,  987,  467,  988,  982,  988,  988,  989,
      466,  989,  989,  465,  986,  983,  990,  464,  990,  990,
      984,  991,  989,  991,  991,  463,  992,  985,  992,  992,
      988,  462,  986,  461,  990,  993,  987,  993,  993, 1002,

      460,  988, 1002,  459,  994,  989,  994,  994,  995,  457,
      995,  995,  990,  997,  456,  999,  997,  991,  999,  455,
     1001, 1003,  992, 1001, 1003,  454,  997,  453,  999, 1004,
      991,  993, 1004,  452,  993, 1002,  992,  451, 1005, 1006,
      994, 1005, 1006, 1007,  995, 1008, 1007, 1011, 1008,  997,
     1011,  999, 1001,  994,  450,  449, 1001, 1003, 1008, 1010,
     1009,  448, 1010, 1009, 1012, 1004,  447, 1012, 1014, 1011,
     1016, 1014,  446, 1016, 1005, 1006, 1009, 1012,  445, 1007,
      444, 1008,  443, 1011,  391, 1013, 1015, 1010, 1013, 1015,
     1017, 1018, 1009, 1017, 1018, 1010, 1009,  264, 1013, 1015,

     1012,  260, 1019,  257, 1014, 1019, 1016, 1020,  256, 1018,
     1020, 1021, 1022, 1023, 1021, 1022, 1023, 1024,  254,  253,
     1024, 1013, 1015,  251, 1021, 1025, 1017, 1018, 1025,  246,
     1022,  242, 1020, 1026, 1027,  241, 1026, 1027, 1019, 1068,
      239, 1068, 1068, 1020,  238,  237,  236, 1021, 1022, 1023,
      233,  231, 1069, 1024, 1069, 1069, 1070,  230, 1070, 1070,
      229, 1025, 1023, 1071, 1025, 1071, 1071, 1024,  225, 1026,
     1027, 1072,  223, 1072, 1072, 1068, 1071, 1073,  222, 1073,
     1073, 1074, 1026, 1074, 1074,  221,  220, 1075, 1069, 1075,
     1075, 1076, 1070, 1076, 1076, 1077,  219, 1077, 1077, 1071,

      218,  216,  215, 1074,  214, 1073, 1078, 1072, 1078, 1078,
      213,  212, 1075, 1073,  211,  210, 1076, 1074, 1079,  208,
     1079, 1079, 1080, 1075, 1080, 1080,  207, 1076,  206,  205,
     1081, 1077, 1081, 1081, 1082, 1080, 1082, 1082, 1083,  204,
     1083, 1083, 1078, 1084,  202, 1084, 1084, 1085,  201, 1085,
     1085, 1083, 1088, 1084, 1079, 1088,  200, 1086, 1080, 1086,
     1086, 1087, 1081, 1087, 1087, 1089, 1081,  199, 1089, 1090,
     1082,  197, 1090,  196, 1083, 1092,  194, 1091, 1092, 1084,
     1091, 1094, 1093, 1085, 1094, 1093, 1085,  192, 1088, 1095,
     1091, 1096, 1095, 1086, 1096, 1097, 1098, 1087, 1097, 1098,

     1087, 1089,  159, 1094, 1099, 1090,   75, 1099,   72, 1086,
     1093, 1092, 1101, 1091, 1095, 1101, 1096, 1094, 1093, 1102,
     1100, 1103, 1102, 1100, 1103, 1095, 1104, 1096,   70, 1104,
       68, 1097, 1098, 1100, 1103, 1105, 1104,   66, 1105, 1106,
     1099,   63, 1106, 1107, 1101,   58, 1107, 1118, 1101, 1133,
     1118, 1133, 1133,   55,   52, 1102, 1100, 1103, 1118,   51,
       50, 1134, 1104, 1134, 1134, 1135,   45, 1135, 1135,   44,
     1136, 1105, 1136, 1136, 1105, 1106,   41,   40, 1137, 1107,
     1137, 1137, 1107, 1136, 1146, 1133, 1134, 1146,   39,   34,
     1135, 1106, 1138,   32, 1138, 1138, 1137, 1134,   30, 1118,

     1139, 1135, 1139, 1139,   27, 1140, 1136, 1140, 1140, 1141,
       23, 1141, 1141, 1139, 1137, 1142,   21, 1142, 1142, 1143,
     1146, 1143, 1143, 1144,   17, 1144, 1144, 1145, 1138, 1145,
     1145,    0, 1147,    0,    0, 1147, 1139, 1148,    0, 1165,
     1148, 1140, 1165,    0,    0, 1141, 1150, 1141,    0, 1150,
     1165, 1142,    0, 1149,    0, 1143, 1149, 1147, 1151, 1144,
        0, 1151, 1148, 1145, 1150,    0, 1149, 1142, 1147, 1153,
        0, 1143, 1153, 1148, 1152, 1144,    0, 1152, 1154, 1145,
        0, 1154, 1150, 1155,    0, 1156, 1155, 1152, 1156, 1149,
     1157, 1165, 1158, 1157, 1151, 1158, 1166,    0, 1178, 1166,

     1178, 1178,    0,    0,    0, 1153,    0, 1166,    0,    0,
     1152, 1178,    0,    0, 1154, 1179, 1154, 1179, 1179, 1155,
     1180, 1156, 1180, 1180,    0,    0, 1157, 1181, 1158, 1181,
     1181,    0,    0, 1179, 1178, 1155, 1182, 1156, 1182, 1182,
     1181,    0, 1157, 1183, 1158, 1183, 1183, 1184, 1166, 1184,
     1184, 1179, 1185,    0, 1185, 1185, 1180, 1186, 1189, 1186,
     1186, 1189, 1187, 1181, 1187, 1187, 1188, 1190, 1188, 1188,
     1190, 1189, 1182, 1191, 1192, 1193, 1191, 1192, 1193, 1183,
        0, 1194, 1183, 1184, 1194, 1190, 1195, 1192, 1185, 1195,
        0,    0, 1196, 1186, 1189, 1196,    0, 1197, 1187, 1184,

     1197,    0, 1188, 1190, 1185, 1198,    0,    0, 1198, 1191,
     1192, 1193, 1199,    0, 1187, 1199, 1216, 1194, 1188, 1216,
     1194,    0, 1195, 1210,    0, 1210, 1210, 1211, 1196, 1211,
     1211,    0, 1212, 1197, 1212, 1212, 1218,    0, 1195, 1218,
     1211, 1198,    0, 1213, 1196, 1213, 1213, 1214, 1199, 1214,
     1214, 1215, 1216, 1215, 1215,    0,    0, 1198, 1217, 1210,
        0, 1217, 1219, 1211, 1199, 1219, 1220, 1221, 1212, 1220,
     1221, 1217, 1218, 1226, 1228, 1226, 1226, 1228, 1227, 1213,
     1227, 1227, 1229, 1214,    0, 1229,    0, 1215, 1232, 1213,
     1232, 1232, 1233, 1241, 1217, 1233, 1241, 1240, 1219, 1240,

     1240,    0, 1220, 1221, 1236,    0, 1236, 1236, 1219, 1226,
     1228,    0, 1237,    0, 1227, 1237,    0, 1236, 1229,    0,
        0,    0,    0,    0, 1232, 1237,    0, 1227, 1233, 1241,
     1232, 1229,    0, 1240, 1233,    0,    0,    0,    0,    0,
     1236,    0,    0,    0,    0,    0,    0,    0, 1237, 1243,
     1243, 1243, 1243, 1243, 1243, 1244, 1244, 1244, 1244, 1244,
     1244, 1245, 1245, 1245, 1245, 1245, 1245, 1246, 1246, 1246,
     1246, 1246, 1246, 1247, 1247, 1247, 1247, 1247, 1247, 1248,
     1248,    0,    0, 1248, 1248, 1249, 1249,    0, 1249, 1249,
     1249, 1250, 1250, 1250, 1250, 1250, 1250, 1251,    0,    0,

        0, 1251, 1251, 1252, 1252, 1252, 1252, 1252, 1252, 1253,
     1253,    0,    0, 1253, 1253, 1254, 1254, 1254, 1254, 1254,
     1254, 1255, 1255,    0, 1255, 1255, 1255, 1256, 1256,    0,
     1256, 1256, 1256, 1257, 1257,    0, 1257, 1257, 1257, 1258,
     1258,    0,    0,    0, 1258, 1259, 1259,    0,    0, 1259,
     1259, 1260, 1260,    0, 1260, 1260, 1260, 1262, 1262,    0,
        0,    0, 1262, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,

     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[89] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
//
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include <algorithm>
#include <cstring>
#include <queue>
#include "mapdef.h"
#include "levcomp.tab.h"
#include "stuff.h"

static bool alloced = false;

queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

// Enter a new state, first clearing yylval of junk.
#define CBEGIN(x) do { BEGIN(x); clean(); } while (0)

static void post_proc_text(char *text, bool trim_right,
                           int strip_trailing, int strip_leading)
{
    char *s = NULL;
    if (trim_right)
    {
        s = text + strlen(text) - 1;
        while (s >= text && isspace(*s))
            *s-- = 0;
    }
    if (strip_trailing)
    {
        if (!s)
            s = text + strlen(text) - 1;
        while (s >= text && --strip_trailing >= 0)
            *s-- = 0;
    }
    if (strip_leading)
    {
        const int original_length = strlen(text);
        if (original_length > strip_leading)
            memmove(text, text + strip_leading,
                    original_length - strip_leading);
        if (original_length >= strip_leading)
            text[original_length - strip_leading] = 0;
    }
}

static char *copy_text(bool trim_right, int strip_trailing, int strip_leading)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        post_proc_text(newstring, trim_right, strip_trailing, strip_leading);
    }
    return (newstring);
}

static void settext(bool trim_right = false,
                    int strip_trailing = 0,
                    int strip_leading = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing, strip_leading);
    yylval.text = newstring;
}

static void str_check()
{
    if (!yylval.text)
    {
        char *buf = (char *) malloc(1);
        if (buf)
        {
            yylval.text = buf;
            *buf = 0;
            alloced = true;
        }
    }
}

static void cattext(bool trim_right = false, int strip_trailing = 0)
{
    if (!yylval.text)
        settext(trim_right, strip_trailing);
    else
    {
        bool was_alloced = alloced;
        char *newbuf = (char*) malloc(strlen(yylval.text) + strlen(yytext) + 1);
        if (!newbuf)
            end(1, false, "Out of memory");
        alloced = true;
        strcpy(newbuf, yylval.text);
        strcat(newbuf, yytext);
        post_proc_text(newbuf, trim_right, strip_trailing, 0);
        if (was_alloced)
            free((void*) yylval.text);
        yylval.text = newbuf;
    }
}








#line 1959 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 145 "levcomp.lpp"


#line 2159 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1243 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1242 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 147 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 149 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 154 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 155 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 156 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 158 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 161 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 170 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 172 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 176 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 178 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 183 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 184 "levcomp.lpp"
;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 185 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 187 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 191 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 193 "levcomp.lpp"
{
                        cattext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 199 "levcomp.lpp"
;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 200 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 202 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 204 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 208 "levcomp.lpp"
;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 210 "levcomp.lpp"
{
                        cattext();
                        return MONSTER_NAME;
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 215 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 216 "levcomp.lpp"
;
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 218 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 222 "levcomp.lpp"
;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 224 "levcomp.lpp"
{
                        cattext();
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 228 "levcomp.lpp"
cattext();
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 230 "levcomp.lpp"
{ BEGIN(INITIAL); str_check(); return STRING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 232 "levcomp.lpp"
;
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 234 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 236 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 238 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 239 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 240 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 241 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 242 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 243 "levcomp.lpp"
{ BEGIN(LUA); return EPILOGUE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 245 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 246 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 247 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DESC; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 248 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 249 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 250 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 251 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 252 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 253 "levcomp.lpp"
return WEIGHT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 254 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 255 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 256 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 257 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 258 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 259 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 260 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORCOL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 261 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKCOL; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 262 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORTILE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 263 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKTILE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 264 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FTILE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 265 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return RTILE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 266 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return TILE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 267 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FHEIGHT; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 268 "levcomp.lpp"
{ CBEGIN(MNAME); return MONS; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 269 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 270 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return MARKER; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 271 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 272 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return CLEAR; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 273 "levcomp.lpp"
{ return ORDER; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 275 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 276 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 277 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 278 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 279 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KPROP; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 280 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return SUBVAULT; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 282 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 284 "levcomp.lpp"
return COLON;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 286 "levcomp.lpp"
return PERC;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 287 "levcomp.lpp"
return DASH;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 289 "levcomp.lpp"
{
                        clean();
                        yylval.f = strtod(yytext, NULL);
                        return NUMBER;
                    }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 295 "levcomp.lpp"
{
                        settext(true, 1, 1);
                        return STRING;
                    }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 300 "levcomp.lpp"
;
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 301 "levcomp.lpp"
;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 302 "levcomp.lpp"
;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 303 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 305 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2756 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1243 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1243 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1242);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 305 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

