#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 87
#define YY_END_OF_BUFFER 88
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1228] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   88,   86,   83,   84,
       85,   79,   86,   86,   77,   80,   86,   81,   78,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   83,   34,   36,   86,   86,
       86,   86,   86,   86,   86,   87,    6,   87,   87,    4,
        2,    3,   87,    2,    2,    2,    2,    9,   10,   87,
        9,    9,   87,   12,   87,   32,   83,   33,   85,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,

       32,   32,   32,   32,   83,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   86,   28,   23,   28,   79,   86,
       86,   27,   80,   86,   81,   78,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   28,   34,   36,   86,   86,   86,   86,
       86,   86,   86,   15,   16,   85,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   86,   13,   15,   13,   13,   13,
       13,   13,   13,   87,   21,   22,   87,   20,   87,   83,
       84,    0,   82,    0,   81,   81,   81,   81,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   83,   34,   36,    0,    0,
        0,    0,    0,   34,    0,    0,    0,    0,    0,    0,
        0,    0,   39,    6,    5,    0,    0,    2,    3,    2,
        0,    2,    2,    2,    2,    9,    9,   10,    9,    9,
        9,    0,   11,    0,   12,   31,    0,   31,   83,   33,
        0,    0,   33,   31,    0,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,    0,   30,
       31,   83,   31,   34,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   26,    0,   26,   28,   23,   28,
        0,   23,   26,    0,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,    0,   25,    0,
       26,   28,   26,   34,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   15,   16,    0,    0,    0,   16,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,    0,
       14,   13,   15,   13,   13,   13,   13,   13,   13,   13,
       13,   19,    0,   19,   21,   22,    0,    0,    0,    0,
       18,    0,   81,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        2,    9,    9,    9,    7,    0,    0,   29,    0,    0,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   34,   31,   31,   31,   31,   31,   31,   31,    0,
       24,    0,    0,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   34,   34,   26,   26,   26,   26,
       26,   26,   26,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   35,    0,    0,    0,
        0,    0,    0,    2,    9,    8,    0,    9,    7,    0,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,    0,   31,    0,   31,   31,   31,   31,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,    0,   26,    0,   26,   26,   26,   26,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,    0,    0,    0,    0,    0,   45,
        0,    0,   67,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   66,   43,    0,    0,    0,    0,    0,    0,

        0,   52,   64,    0,    0,    0,    0,   38,    0,    0,
        0,    0,    2,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,    0,
       31,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,    0,   26,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,    0,    0,
       70,    0,   46,    0,   62,   71,   72,   74,   73,   75,
        0,    0,    0,    0,    0,    0,    0,   48,   63,    0,
       55,    0,    0,    0,    0,    0,    0,    0,   41,    1,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   54,   50,   57,    0,   53,    0,    0,    0,    0,
       68,   56,   47,    0,    0,   51,    0,    0,    0,    0,
        0,    1,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   65,    0,    0,    0,    0,   69,
        0,   49,    0,    0,    0,    0,    0,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,    0,   31,   31,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
        0,   26,   26,   13,   13,   13,   13,   13,   13,   13,
       13,    0,    0,   59,    0,   76,    0,    0,    0,   37,
        0,    0,   31,   31,   31,   31,   31,   31,    0,   31,
       31,    0,   31,   26,   26,   26,   26,   26,   26,    0,
       26,   26,    0,   26,   13,   13,   13,   13,   58,    0,
       61,    0,   42,   40,   31,   31,   31,   31,   31,   31,

       26,   26,   26,   26,   26,   26,   13,   13,   60,    0,
       31,   31,   26,   26,   13,    0,   31,   26,   13,    0,
       31,   26,   13,   44,   31,   26,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    7,    1,    1,    8,
        9,    1,   10,   11,   12,   13,    1,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    1,
        1,    1,    1,    1,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       25,   32,   33,   34,   35,   36,   37,   25,   25,   25,
        1,   38,    1,    1,   25,    1,   39,   25,   25,   40,

       41,   42,   43,   44,   45,   25,   25,   46,   25,   25,
       47,   48,   25,   49,   50,   51,   52,   53,   25,   25,
       25,   25,   54,    1,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[56] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        5,    6,    6,    6,    1,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1248] =
    {   0,
        0,   54,   58,   68,   62,   64,   54,   72,  119,  173,
      227,  281,  335,  389,   75,  178, 3745, 4105,   79, 4105,
     3740, 4105, 3723,   76, 4105,   78, 3714,   80, 4105, 3705,
       76, 3702,   62, 3686,  163,   66,   67,  160, 3684, 3685,
     3672,  162,   85, 3682, 3660,  442,    0, 4105,  170, 3643,
     3633, 3629,  149,  151, 3620, 4105, 4105, 3670,  199, 4105,
        0, 4105, 3669,  203,    0, 3635,  175, 3607, 4105, 3649,
       55, 3550,  112, 4105, 3596,  286,  290, 4105,  295,  394,
      398,  407,  411,  420,  424,  451,  464,  470,  474,  480,
      501,  509,  517,  521,  528,  547,  532,  552,  563,  569,

      579,  573,  584,  594,  610,  604,  614,  621,  625,  629,
      634,  641,  651,  656,  403,  673, 4105,  682,  449,  691,
      693, 4105,  699,  703,  713,  567,  619,  717,  642,  719,
      728,  743,  744,  754,  756,  758,  773,  775,  781,  783,
      730,  820,  793,  824,  801,  812,  830,  813,  828,  835,
      836,  840,  847,  851, 4105,  867,  196,  198, 3585,  289,
      288,  200,  291,  183,  292,  439,  464,  494,  271,  294,
      272,  527,  457,  202,  888,  276,  892,  652,  379,  388,
      397,  675,  658,  897,  904, 4105,  908, 4105,  912,  515,
     4105, 3586, 4105, 3577,  405, 3572, 3569,  479, 3550, 3560,

     3545, 3533,  299, 3535, 3530, 3532, 3530, 3511,  296, 3512,
     3516, 3508, 3504, 3484, 3484, 3476, 3483, 3472, 3448, 3436,
     3441, 3427, 3416,  504, 3396,    0,    0, 4105, 3385, 3378,
     3377,  420, 3368,    0,  467, 3375, 3376, 3370, 3389,  532,
     3351, 3341, 4105, 4105, 4105, 3385,  872,    0, 4105,    0,
     3380,  915, 3363, 3348,  373, 3316, 3314, 4105,  599, 3310,
      919,  512, 4105, 3361, 4105,  923,  927,  934,  949, 4105,
      953,  964, 4105,  939,  971,  958,  979,  988,  993,  999,
     1006, 1010, 1014, 1023, 1030, 1038, 1049, 1053, 1062, 1058,
     1070, 1079, 1090, 1097, 1105, 1110, 1114, 1120, 1129, 1134,

     1140, 1149, 1157, 1166, 1171, 1175, 1180, 1187, 1217, 4105,
     1194,    0, 1201, 1222, 1226, 1236, 1240, 1244, 1248, 1254,
     1267, 1261, 1271, 1275,  984, 1031, 1298, 1316, 4105, 1321,
     1325, 4105, 1329, 1330, 1083, 1340, 1348, 1350, 1355, 1356,
     1369, 1310, 1125, 1370, 1371, 1379, 1375, 1309, 1394, 1395,
     1387, 1400, 1249, 1399, 1401, 1417, 1145, 1418, 1422, 1438,
     1442, 1440, 1446, 1448, 1461, 1465, 1466, 1470, 4105, 1492,
     1477,    0, 1496, 1507, 1518, 1500, 1508, 1486, 1525, 1512,
     1531, 1537, 1535, 1539, 1585, 4105, 1589, 1593, 1547, 4105,
     3350,  725,  788,  637,  578,  696,  701,  721,  723,  295,

      823,  913,  607, 1278,  418,  760,  384,  454,  834,  533,
      756,  784,  887,  835,  852,  653,  927,  766, 1032, 1597,
     4105,  957,    0, 1066,  934,  185,  587, 1033,  854,  932,
      987, 1565, 1566, 1603, 1607, 4105, 1611, 1615, 1620, 1626,
     4105, 1630, 3328, 3316, 3302, 3314, 3286, 3281, 3296, 3286,
     3281, 3275, 3277, 3271, 3254, 3252, 3246,  955, 3250, 3238,
     3227, 3220, 3217, 3213, 3204, 3190, 3184, 1090, 3171, 3181,
     3175, 3173, 3130, 1634, 3106, 1638, 3105, 3096, 3068, 3063,
     3074, 1648, 1652, 1657, 4105, 1663, 1667, 4105, 1671, 1675,
     1681, 1685, 1689, 1694, 1704, 1712, 1720, 1724, 1739, 1731,

     1735, 1750, 1759, 1770, 1763, 1774, 1778, 1798, 1782, 1805,
     1809, 1817, 1826, 1830, 1837, 1844, 1848, 1858, 1865, 1886,
     1869, 1890, 1895, 1907, 1911, 1916, 1921, 1925, 1930, 1934,
     4105, 1938, 1971, 1917, 1789, 1955, 1945, 1751, 1962, 1976,
     1964, 1984, 1985, 1990, 1996, 2002, 2003, 2013, 2015, 2019,
     2024, 2025, 2034, 2042, 2044, 2050, 2064, 2065, 2071, 2072,
     2073, 2079, 2090, 2085, 2095, 2110, 2116, 2120, 2124, 2125,
     2129, 2130, 2134, 1177,  992, 1199, 1017, 1189,  870, 1080,
     1076, 1234, 1221, 1057,  496, 1181, 1187, 1280,  946,  831,
     1153, 1277, 1143, 1398, 1416, 1230,  589, 1522, 1271, 1415,

     1343, 1423, 1098, 2138, 1333, 2142, 1439, 1275, 1503, 1058,
     2180, 4105, 2184, 3066, 3066, 3042, 3033, 3041, 3043, 3032,
     3029, 3033, 3009, 3009, 3010, 2999, 2994, 3002, 2978, 2970,
     2970, 2969, 2965, 2946, 2943, 2941, 2936, 2917, 2900, 2914,
     2909, 2901, 2887, 2874, 2851, 2188, 4105, 2850, 1695, 2812,
     2808, 2805, 2143, 2817, 2196, 4105, 2200, 2204, 4105, 2208,
     2212, 2217, 2222, 2226, 2234, 2238, 2243, 2264, 2273, 2269,
     2278, 2287, 2291, 2295, 2310, 2315, 2326, 2334, 2342, 2354,
     2338, 2358, 2363, 2373, 2377, 2384, 2398, 2402, 2408, 2422,
     2426, 2430, 2439, 2445, 2449, 2453, 2457, 2461, 2467, 2296,

     2303, 2247, 2473, 2218, 2414, 2468, 2474, 2495, 2479, 2491,
     2513, 2520, 2518, 2522, 2529, 2535, 2530, 2540, 2560, 2536,
     2541, 2552, 2561, 2575, 2580, 2581, 2586, 2587, 2582, 2598,
     2285, 2604, 2610, 2621, 2625, 2629, 2630, 2635, 1552, 1441,
     1203, 1541,  797, 1372, 1689, 1544, 1474, 1513, 1635, 1734,
     1547, 1285, 1708, 1548, 1772, 1559, 1569, 1629, 1613, 1448,
     1668, 1820, 1838, 1804, 1863, 1841, 1870, 1933, 1793, 1832,
     1782, 1853, 1691, 2636, 2799, 2777, 2769, 2741, 2750, 4105,
     2739, 2741, 4105, 2740, 2732, 2727, 2723, 2722, 2699, 2694,
     1883, 2693, 4105, 4105, 2688, 2680, 2698, 2693, 2673, 2677,

     2649, 4105, 4105, 2644, 2644, 2618, 2613, 4105, 2599, 2594,
     2171, 2568, 2586, 2649, 2642, 2656, 2672, 2681, 2693, 2697,
     2701, 2707, 2713, 2719, 2725, 2739, 2744, 2748, 2756, 2762,
     2766, 2770, 2774, 2785, 2797, 2801, 2805, 2809, 2813, 2820,
     2825, 2836, 2844, 2848, 2852, 2857, 2863, 2867, 2875, 2879,
     2883, 2887, 2889, 2650, 2832, 2891, 2731, 2913, 2897, 2906,
     2917, 2926, 2937, 2938, 2943, 2921, 2945, 2944, 2955, 2961,
     2963, 2968, 2969, 2983, 2989, 2984, 2990, 2995, 3007, 3008,
     3013, 3012, 3014, 3018, 3024, 3029, 3033, 3037, 3039, 1938,
     1852, 1984, 1530, 1997, 1935, 2070, 2081, 2137, 2144, 2164,

     2231, 2136, 2006, 2632, 2029, 1876, 2103, 2336, 2382, 1744,
     2424, 1990, 2140, 2020, 1669, 1901, 2125, 1608, 2601, 2595,
     4105, 2556, 4105, 2518, 4105, 4105, 4105, 4105, 4105, 4105,
     2532, 2146, 2500, 2474, 2474, 2470, 2465, 4105, 4105, 2418,
     4105, 2406, 2410, 2401, 2339, 2303, 2309, 2258, 4105, 2289,
     3061, 3077, 3081, 3085, 3092, 3099, 3103, 3107, 3112, 3116,
     3120, 3124, 3134, 3130, 3151, 3142, 3155, 3169, 3173, 3138,
     3181, 3190, 3194, 3198, 3211, 3204, 3216, 3225, 3233, 3241,
     3246, 3242, 3250, 3068, 3251, 3093, 3256, 3185, 3257, 3267,
     3268, 3273, 3280, 3281, 3295, 3296, 3297, 3302, 3307, 3322,

     3318, 3323, 3334, 3336, 3341, 3342, 3346, 3347, 3348, 3353,
     3357, 3365, 2473, 2489, 2501, 2181, 2513, 2808, 2297, 2047,
     2580, 2678, 2770, 2250, 2052, 2778, 2353, 2182, 2309, 1220,
     2216, 4105, 4105, 4105, 2271, 4105, 2232, 2208, 2134, 2119,
     4105, 4105, 4105, 2074, 2022, 4105, 1976, 1973, 1938, 2790,
     1865, 1897, 3371, 3385, 3397, 3402, 3408, 3414, 3423, 3427,
     3432, 3437, 3446, 3451, 3458, 3464, 3472, 3476, 3481, 3490,
     3495, 3499, 3376, 3419, 3477, 3503, 3485, 3504, 3515, 3519,
     3520, 3524, 3525, 3530, 3546, 3554, 3562, 3564, 3568, 3569,
     3570, 3576, 2860, 2361, 2381, 2143, 2357, 2954, 2224, 3040,

     2396, 2407, 3580, 2523, 4105, 1834, 1791, 1730, 1700, 4105,
     1491, 4105, 1429, 3177, 3391, 1337, 3462, 3585, 3592, 3599,
     3607, 3611, 3616, 3623, 3631, 3637, 3642, 3646, 3651, 3655,
     3627, 3661, 3665, 3666, 3638, 3677, 3692, 3681, 3685, 3693,
     3706, 3708, 3712, 2372, 2616, 3044, 2454, 3065, 2581, 3716,
     3722, 1351, 1188, 4105, 1140, 4105,  893, 3731,  844, 4105,
     3732,  669, 3736, 3751, 3759, 3763, 3775, 3779, 3786, 3790,
     3794, 3798, 3803, 3737, 3807, 3809, 3816, 3817, 3821, 3828,
     3832, 3833, 3837, 3841, 3148, 2591, 3152, 2535, 4105,  659,
     4105,  528, 4105, 4105, 3846, 3859, 3863, 3876, 3883, 3888,

     3851, 3894, 3867, 3898, 3902, 3906, 3199,  981, 4105,  412,
     3911, 3915, 3920, 3925, 2656,  362, 3929, 3933, 2291,  203,
     3937, 3945, 3226, 4105, 3952, 3943, 4105, 3990, 3996, 4002,
     4008, 4014, 4020, 4026, 4032, 4038, 4044, 4050, 4056, 4062,
     4068, 4074, 4080, 4086, 4092,  105, 4098
    } ;

static yyconst flex_int16_t yy_def[1248] =
    {   0,
     1227,    1, 1228, 1229, 1230, 1230, 1231, 1231, 1227,    9,
     1227,   11, 1227,   13, 1232, 1232, 1227, 1227, 1227, 1227,
     1227, 1227, 1233, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1234, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1235, 1227,
     1236, 1227, 1227, 1237, 1236, 1236, 1236, 1238, 1227, 1227,
     1238, 1238, 1239, 1227, 1227, 1240, 1227, 1227, 1227, 1240,
     1241, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,

     1240, 1240, 1240, 1240,   46, 1242, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1243, 1227, 1227, 1227, 1243, 1244,
     1243, 1227, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243,   46, 1245, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1227, 1227, 1227, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1227, 1246,   46, 1246, 1246, 1246,
     1246, 1246, 1246, 1247, 1227, 1227, 1227, 1227, 1247, 1227,
     1227, 1233, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,

     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227,   46, 1234, 1227, 1227, 1227,
     1227, 1227, 1227, 1234, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1236, 1227, 1236,
     1227, 1236, 1236, 1236, 1236, 1238, 1238, 1227, 1238, 1238,
     1238, 1239, 1227, 1227, 1227, 1240, 1240, 1240, 1227, 1227,
     1227, 1227, 1227, 1241, 1241, 1240, 1241, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,

     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1227,
     1240,  105, 1242, 1242, 1242, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1243, 1243, 1243, 1227, 1227, 1227,
     1227, 1227, 1244, 1244, 1243, 1244, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1227, 1227,
     1243,  144, 1245, 1245, 1245, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1227, 1227, 1227, 1227, 1227, 1227,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,

     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1227,
     1227, 1246,  177, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1247, 1247, 1247, 1227, 1227, 1227, 1227, 1227, 1247,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1236, 1238, 1238, 1238, 1227, 1227, 1240, 1227, 1227, 1241,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,

     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1242, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1243,
     1227, 1227, 1244, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1245, 1234, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,

     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1247, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1236, 1238, 1227, 1227, 1238, 1227, 1227,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1243,

     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,

     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1236, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,

     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1236,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,

     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1236, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,

     1246, 1246, 1246, 1246, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1246, 1246, 1246, 1246, 1227, 1227,
     1227, 1227, 1227, 1227, 1240, 1240, 1240, 1240, 1240, 1240,

     1243, 1243, 1243, 1243, 1243, 1243, 1246, 1246, 1227, 1227,
     1240, 1240, 1243, 1243, 1246, 1227, 1240, 1243, 1246, 1227,
     1240, 1243, 1246, 1227, 1240, 1243,    0, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227
    } ;

static yyconst flex_int16_t yy_nxt[4161] =
    {   0,
       18,   19,   20,   21,   19,   18,   22,   23,   18,   24,
       25,   26,   27,   28,   29,   18,   30,   31,   32,   18,
       33,   18,   18,   34,   18,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   18,   18,   44,   18,   18,   45,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   46,   74,   75,   46,   47,
       57,   58,   59,   60,   69,   70,   69,   70,   48,   56,
       62,   63,   64,   65,   74,   75,  185,  186,  187,  185,
      190,   49,  213,  190,  204,  188,  211,   66,  194,  195,
      194,  195,  197,  198,   50,  205,  214,  212,  200,   51,

      222,   52,  201,   53,  259,  202,   54,   55,  223,  260,
      391,   71,  189,   71,  263,  264,   72,   67,   72,   76,
       77,   78,   79,   77,   76,   80,   81,   76,   82,   83,
       84,   85,   86,   87,   76,   88,   89,   90,   76,   91,
       76,   76,   92,   76,   93,   94,   95,   96,   97,   98,
       99,  100,  101,   76,   76,  102,  103,   76,  104,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,  105,  215,  239,  105,  106,  185,
      186,  187,  185,  207,  220,  235,  208,  107,  188,  241,
      209,  242,  216,  210,  254, 1227,  221, 1227,  240,  214,

      108,  244,  246,  247,  245,  249,  251,  252,  194,  392,
      197,  393, 1227,  109, 1227,  189,  401, 1224,  110,  398,
      111,  419,  112,  606,  255,  113,  114,  115,  116,  117,
      118,  116,  115,  119,  120,  115,  121,  122,  123,  124,
      125,  126,  115,  127,  128,  129,  115,  130,  115,  115,
      131,  115,  132,  133,  134,  135,  136,  137,  138,  139,
      140,  115,  115,  141,  142,  115,  143,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  144, 1227, 1227,  144,  145,  267, 1227,  267,
      267,  269,  270,  271,  269,  146,  271,  273,  271,  271,

     1227, 1227,  412, 1227, 1227,  414, 1227, 1227,  147,  394,
      395,  455,  402,  399,  396,  403,  422,  397,  581,  404,
      413,  148,  405,  268,  400,  456,  149,  272,  150,  448,
      151,  449,  272,  152,  153,   18,  154,  155,  156,  154,
       18,   22,   23,   18,   24,   25,  157,   27,  158,   29,
      159,  160,  161,  162,  159,  163,  159,  159,  164,  159,
      165,  166,  167,  168,  169,  170,  171,  172,  173,  159,
      159,  174,  175,  159,  176,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,   18,   18,
      177, 1227,  254,  177,   47,  267, 1227,  267,  267,  275,

     1227,  267,  275,   48,  326, 1220,  276,  326,  267, 1227,
      267,  267,  267,  589,  267,  267,  178,  197,  198,  278,
      279,  267,  255,  267,  267,  267,  425,  267,  267,  179,
     1227,  268,  278,  279,  180,  277,  181,  280,  182,  426,
      327,  183,   55,  226,  268,  427,  226,  227,  268,  587,
      326, 1227,  267,  326,  267,  267,  228,  268,  241,  406,
      242,  268, 1216,  281,  282,  267, 1227,  267,  267, 1227,
      407,  267,  417,  267,  267,  267, 1227,  267,  267,  408,
      418,  267,  229,  267,  267,  590,  327,  230,  268,  231,
      283,  197,  198,  409,  232,  233,  284,  474,  460,  287,

      285,  268,  267,  286,  267,  267, 1227,  268, 1227,  410,
      267,  268,  267,  267,  263,  264,  190,  268,  267,  190,
      267,  267,  267,  288,  267,  267,  411,  471,  750,  267,
      472,  267,  267,  267,  289,  267,  267,  291,  268, 1227,
      292,  295,  290,  297,  293, 1227,  268,  294,  267,  415,
      267,  267,  296,  267,  268,  267,  267,  298,  268,  239,
      592,  416,  299,  301,  267,  268,  267,  267,  326,  268,
      267,  326,  267,  267,  267, 1210,  267,  267,  302,  300,
      267,  240,  267,  267,  268,  309,  310,  309,  309,  268,
     1227,  304,  308,  575,  306,  267,  303,  267,  267, 1227,

      268, 1227,  307,  305,  327,  314,  268,  314,  314,  763,
      268,  312,  270,  271,  312,  267,  268,  267,  267, 1227,
      326,  268,  267,  326,  267,  267,  267,  607,  267,  267,
      267,  268,  267,  267,  311,  267,  316,  267,  267,  342,
      584,  315,  267,  326,  267,  267,  326,  272,  259, 1227,
      298,  268,  267,  260,  267,  267,  327,  267,  268,  267,
      267,  346,  268,  574, 1227, 1227,  268,  424,  320,  598,
     1227,  268,  317, 1209,  328,  329,  330,  328,  268,  327,
      318,  409,  319,  330,  332,  330,  330, 1227,  268,  322,
      321,  323,  334,  268,  326,  334,  430,  326,  431,  335,

      326,  192,  428,  326,  326,  337,  338,  326, 1227,  324,
      331,  337,  338, 1227,  326,  576,  339,  326,  326,  331,
      326,  326, 1194,  326,  429,  340,  341,  577,  336,  326,
      327,  326,  326, 1227,  326, 1227,  327,  197,  393,  343,
      327,  347,  580,  344,  326,  326,  345,  326,  326,  367,
      327,  578,  348,  579,  327,  326,  327,  326,  326,  326,
      326,  349,  326,  350,  354,  327,  351,  327, 1227,  356,
      352,  358, 1227,  353,  326,  355,  326,  326, 1227,  326,
      327,  327,  326,  357,  326,  326,  588,  326,  359,  360,
      593,  327,  600,  327,  326,  327, 1227,  326,  365,  361,

      197,  393,  374,  363,  234,  374,  366,  594,  362, 1227,
      327,  234,  327,  326,  326,  364,  326,  326,  327,  894,
      327,  368,  369,  370,  368,  372,  329,  330,  372,  326,
      327,  326,  326,  371,  326, 1227,  326,  326,  375,  326,
      326,  326,  582, 1227,  326,  376, 1227, 1227,  326,  327,
      327,  326,  385,  386,  387,  385,  756,  327,  596,  357,
      377,  331,  591,  380, 1227,  327, 1227,  327,  389,  390,
      389,  389,  327,  327,  244,  246,  247,  327,  382,  378,
      383,  428, 1227,  379,  327,  381,  597,  744,  388,  420,
      421,  420,  420,  423,  386,  387,  423, 1193,  433, 1227,

      384,  433,  595,  429,  388,  435,  436,  437,  435,  439,
      436,  439,  439,  440,  441,  442,  440,  249,  251,  252,
      484,  485,  486,  484,  267, 1227,  267,  267,  267,  388,
      267,  267,  583, 1192,  434,  487,  488,  487,  487, 1227,
      275,  438,  267,  275, 1227,  438, 1227,  276,  599,  434,
      269,  270,  271,  269,  271,  270,  271,  271, 1227,  267,
      268,  267,  267,  755,  268,  489,  310,  489,  489, 1227,
      628,  268,  275,  482,  267,  275,  277,  609,  605,  276,
      490,  488,  487,  490,  629,  326,  272,  276,  326,  267,
      272,  267,  267, 1227,  267,  268,  267,  267,  603, 1227,

      267,  280,  267,  267, 1227,  281,  282,  267,  277,  267,
      267,  267,  280,  267,  267,  267,  277,  267,  267,  491,
      740,  327,  281,  282,  267,  268,  267,  267, 1215, 1227,
      268,  267,  326,  267,  267,  326,  268,  610,  493,  267,
      492,  267,  267,  268, 1227, 1227,  742,  268,  608,  494,
      267,  268,  267,  267,  267,  601,  267,  267,  602,  267,
      268,  267,  267,  267,  495,  267,  267,  268,  327, 1227,
     1227,  267,  498,  267,  267,  268,  749,  500, 1227,  496,
      267,  497,  267,  267,  326,  499,  268,  326, 1227,  501,
      268,  267, 1227,  267,  267,  268,  604,  590,  267,  268,

      267,  267,  746,  745,  774,  503,  267,  268,  267,  267,
     1227,  267,  502,  267,  267,  267,  268,  267,  267,  504,
      327,  267,  639,  267,  267,  640,  326,  268,  505,  326,
      267,  506,  267,  267,  268,  267,  770,  267,  267,  507,
      536,  267,  268,  267,  267,  508,  326,  268,  509,  326,
      267,  268,  267,  267, 1191, 1227,  510,  268,  267,  759,
      267,  267,  327,  512,  513, 1227,  268,  267,  511,  267,
      267,  268,  267,  552,  267,  267,  267,  268,  267,  267,
      514,  267,  327,  267,  267,  757,  268,  516,  267, 1227,
      267,  267,  739, 1227,  268,  267,  517,  267,  267, 1227,

      515, 1227,  314,  268,  314,  314,  518, 1190,  268,  751,
      519, 1227,  268,  520,  741, 1227,  752,  268,  309,  310,
      309,  309,  743,  314,  268,  314,  314,  522,  488,  522,
      522,  268, 1227, 1227,  892,  521,  748,  267,  315,  267,
      267,  267, 1227,  267,  267,  267, 1227,  267,  267,  267,
      326,  267,  267,  326,  268,  267,  762,  267,  267,  315,
     1103,  747,  267,  315,  267,  267,  523,  508,  267,  527,
      267,  267,  267,  268,  267,  267,  267,  268,  267,  267,
      548,  268,  525, 1227,  524,  268,  327, 1227,  526, 1227,
     1227,  268, 1227,  585,  320,  753,  758, 1227,  268,  530,

      531,  532,  530,  766,  268,  604,  528,  586,  268,  754,
      326,  326,  268,  326,  326,  901,  321,  328,  329,  330,
      328,  529,  330,  329,  330,  330,  370,  369,  370,  370,
      334,  334,  542,  334,  334,  327,  535,  335,  335,  192,
      192,  533,  531,  532,  533, 1227,  327,  327,  335,  326,
      192,  326,  326,  331,  326, 1227,  326,  326,  331,  326,
      326,  339,  340,  341,  768, 1189,  336,  336,  339,  534,
      326,  326,  326,  326,  326,  326,  326,  336,  771,  326,
      326,  340,  341,  326, 1227,  327,  780,  327,  326,  537,
     1160,  326,  327,  327,  541,  326,  326,  538,  326,  326,

      326,  326,  326,  326,  326,  326,  327,  327,  327,  539,
     1227,  540,  327,  543,  544,  546,  327,  760,  326,  326,
      545,  326,  326,  326,  327,  549,  326, 1227, 1227,  547,
      550,  327,  327,  761,  767, 1227,  327,  327,  327,  326,
      769,  326,  326,  326,  326,  553,  326,  326,  551,  326,
      326, 1227,  326, 1227,  327,  327,  554,  556,  891,  327,
     1227,  555,  326,  557,  559,  326,  326,  326, 1157,  326,
      326,  368,  369,  370,  368,  327,  907,  327,  326,  327,
      558,  326,  560,  327,  772,  327, 1227,  326,  783,  562,
      326,  561,  563,  370,  369,  370,  370,  374,  327,  234,

      374,  326,  327,  327,  326, 1156,  234,  327,  374,  326,
      234,  374,  326,  326,  327, 1227,  326,  234,  564,  565,
      531,  566,  565,  327,  569, 1227,  326,  571,  234,  326,
      567,  551,  326,  375, 1227,  326,  326,  327,  326,  326,
      326,  326, 1227,  326,  375,  327,  897,  773,  389,  327,
      389,  389,  568, 1227,  764,  375, 1227,  765,  380, 1227,
     1227, 1015,  327,  896, 1227,  570,  433,  433,  327,  433,
      433, 1227,  327,  890,  327,  893,  327,  903,  905,  900,
      381, 1227,  572,  793,  388,  573,  385,  386,  387,  385,
      389,  386,  389,  389,  420,  421,  420,  420,  420,  421,

      420,  420,  434,  434,  611,  612,  613,  611,  435,  436,
      437,  435,  439,  436,  439,  439,  442,  441,  442,  442,
     1227,  439,  388,  439,  439, 1227,  388,  440,  441,  442,
      440,  442,  441,  442,  442,  646,  647,  646,  646,  649,
      434, 1227,  649,  794,  438,  906, 1031, 1227,  438,  655,
      656,  657,  655,  658,  659,  660,  658,  438,  484,  485,
      486,  484,  898,  434,  486,  485,  486,  486,  487,  488,
      487,  487,  489,  310,  489,  489,  490,  488,  487,  490,
     1227, 1227,  267,  276,  267,  267,  267,  908,  267,  267,
      267,  650,  267,  267,  491,  267,  649,  267,  267,  649,

      661, 1227,  482, 1227,  268,  267,  482,  267,  267,  663,
      895,  257,  277,  267, 1028,  267,  267,  662,  268, 1155,
     1227,  267,  268,  267,  267,  267,  268,  267,  267,  902,
      918,  268,  267,  664,  267,  267,  267,  666,  267,  267,
      267,  268,  267,  267, 1154,  665, 1227,  667,  650,  268,
      670,  267,  326,  267,  267,  326, 1227,  268,  669,  899,
      267,  268,  267,  267,  267,  668,  267,  267,  268,  671,
     1024,  267,  268,  267,  267,  267,  268,  267,  267,  267,
      703,  267,  267,  267, 1227,  267,  267,  268,  327,  675,
      326,  672,  674,  326, 1227,  677,  268,  904,  673,  267,

      268,  267,  267,  676,  700, 1227,  267,  268,  267,  267,
      267,  268,  267,  267,  679,  268, 1227, 1153,  267,  268,
      267,  267,  914,  678,  680,  681,  327,  267,  916,  267,
      267,  267, 1227,  267,  267,  268,  682,  911,  267,  909,
      267,  267,  268,  683, 1227,  267,  268,  267,  267,  267,
     1227,  267,  267, 1227,  268,  802,  684,  685,  910,  267,
     1152,  267,  267,  268, 1227, 1227,  267,  268,  267,  267,
      267, 1014,  267,  267,  268, 1227,  686,  689,  912,  687,
      688,  268, 1227,  915,  803,  268,  690,  267, 1227,  267,
      267,  522,  488,  522,  522,  268,  693,  647,  693,  693,

      933, 1052,  268,  691,  917, 1117,  268,  692,  267, 1022,
      267,  267,  695, 1227,  267,  695,  934,  267,  326,  267,
      267,  326,  267,  268,  267,  267,  267,  315,  267,  267,
      534,  267,  268,  267,  267,  530,  531,  532,  530,  532,
      531,  532,  532, 1029,  268, 1227,  326, 1227,  268,  326,
     1227,  523,  694,  268,  327,  913,  326, 1016,  268,  326,
      702,  697,  268,  326,  696,  326,  326,  268,  326,  698,
     1013,  327,  533,  531,  532,  533,  699,  326, 1114,  335,
      326,  192,  327,  701, 1113,  326,  326,  706,  326,  326,
     1112,  326,  327,  705,  326,  704, 1227,  326,  921,  327,

      326,  327, 1227,  326,  326,  709,  326,  326,  336, 1227,
      707,  923,  708,  327,  326,  710,  326,  326, 1227,  326,
      326,  327,  327,  326, 1025,  326,  326,  327,  326,  326,
      714,  712, 1227,  327,  711,  326,  716, 1018,  326,  327,
      327, 1227,  713,  326,  715,  326,  326, 1027,  326,  717,
      327,  326,  327,  719,  326, 1111,  327,  718,  720, 1227,
     1021,  327,  327,  721, 1227,  326,  326,  722,  326,  326,
     1097,  327,  326,  326,  326,  326,  326,  326, 1099,  327,
      326,  327, 1227,  326,  925,  724,  326,  327, 1110,  326,
      723,  326,  728, 1227,  326,  926,  565,  531,  566,  565,

      729,  327,  327,  725,  727,  234,  726,  730,  327,  327,
      327,  566,  531,  566,  566, 1227,  327,  732,  647,  646,
      732,  326,  327,  731,  326,  734,  326,  327,  734,  326,
      326,  326,  375,  326,  326,  326, 1023, 1227,  326,  646,
      647,  646,  646,  649,  811, 1109,  649,  811, 1227, 1227,
     1227,  927, 1227,  327, 1227, 1227, 1227,  327,  928,  567,
     1108,  327,  327, 1037, 1030,  733,  327,  327, 1017, 1146,
      736,  327,  811, 1026,  737,  811, 1227,  735,  929, 1038,
      738,  611,  612,  613,  611,  613,  612,  613,  613,  646,
      647,  646,  646, 1227, 1227,  650,  812,  655,  656,  657,

      655,  657,  656,  657,  657,  658,  659,  660,  658,  660,
      659,  660,  660,  267, 1093,  267,  267,  434,  267,  326,
      267,  267,  326,  267,  812,  267,  267,  267, 1227,  267,
      267, 1107, 1101,  814,  815,  267, 1227,  267,  267,  267,
      856,  267,  267, 1227,  267,  930,  267,  267,  326,  268,
      257,  326,  819,  816,  268,  327,  818, 1148,  257,  268,
      817, 1106, 1227,  268,  820,  267, 1104,  267,  267, 1098,
      267,  268,  267,  267,  267,  268,  267,  267,  854,  267,
      268,  267,  267,  821,  327, 1105,  326,  822,  267,  326,
      267,  267,  267, 1052,  267,  267,  267,  326,  267,  267,

      326,  268,  823, 1227,  326,  824,  268,  326, 1051, 1227,
      268,  267,  825,  267,  267,  268,  267,  852,  267,  267,
      853, 1227,  327,  826,  268,  827, 1096,  267,  268,  267,
      267,  828,  268,  327, 1223,  267,  883,  267,  267,  267,
      327,  267,  267,  267,  829,  267,  267,  268, 1227, 1050,
      938,  830,  268,  831, 1049,  267,  832,  267,  267,  267,
     1102,  267,  267,  268,  267, 1227,  267,  267,  833, 1227,
      834,  268, 1100, 1227,  267,  268,  267,  267,  267,  268,
      267,  267,  836, 1147, 1227,  267,  835,  267,  267, 1048,
     1144,  268,  837, 1227, 1227,  268,  939,  838, 1185,  267,

      268,  267,  267,  267, 1145,  267,  267, 1149, 1227,  267,
      268,  267,  267,  840,  268,  326,  841,  839,  326, 1227,
     1047,  268,  842,  267, 1046,  267,  267,  267,  857,  267,
      267,  267, 1045,  267,  267,  268, 1227, 1044,  941,  268,
      693,  647,  693,  693,  843,  268,  267, 1150,  267,  267,
      695,  327,  267,  695,  267,  844,  267,  267,  267,  268,
      267,  267,  267,  268,  267,  267, 1227,  268,  850,  326,
      267,  850,  326, 1187,  326,  326,  268,  326,  326, 1043,
      326,  845,  268,  326, 1042, 1227,  268, 1032, 1041,  858,
      268,  846,  326,  859,  268,  326,  326, 1040,  268,  326,

      849, 1227,  696, 1033,  268,  327,  847,  855,  848,  860,
      327,  327,  861, 1227,  326, 1034,  327,  326,  862,  326,
      851,  326,  326,  326,  326, 1227,  326, 1036,  327, 1039,
      326,  326,  327,  326,  326, 1227,  326,  326,  863,  326,
      326,  326,  326,  866,  326,  326, 1036, 1227,  865,  869,
      327, 1035,  864,  326,  870,  327,  326,  327,  867,  327,
      868,  326,  326, 1151,  326,  326,  327,  327,  872,  873,
     1034,  874,  327,  327,  871, 1208,  326,  327,  327,  326,
      875,  326,  326,  326,  326,  326,  326,  326,  326,  327,
      326,  326, 1227, 1227, 1041,  876,  878,  327,  327,  326,

      879,  880,  326, 1227,  881,  732,  647,  646,  732, 1033,
     1207,  326,  327,  877,  326, 1032,  950,  327,  327,  327,
     1188,  949,  734,  327,  327,  734,  326,  882, 1227,  326,
      326,  326,  948,  326,  326,  327,  888,  811,  947,  888,
      811,  327, 1186,  267, 1227,  267,  267,  327, 1227, 1019,
      267,  326,  267,  267,  326,  946,  884,  267,  327,  267,
      267,  952,  327,  945,  984, 1020,  327,  327, 1227,  887,
      953,  944,  327,  267,  735,  267,  267,  943,  885,  268,
      886,  951,  267,  942,  267,  267,  268,  327,  889,  812,
     1227,  941, 1042,  268,  267,  955,  267,  267,  267,  940,

      267,  267,  267,  954,  267,  267, 1219,  939,  267,  268,
      267,  267,  938,  937,  267,  957,  267,  267,  268,  956,
      267,  936,  267,  267,  935,  932,  267,  958,  267,  267,
      268,  931,  326,  959,  268,  326,  930,  929,  268,  960,
      267,  928,  267,  267,  268,  267,  927,  267,  267,  267,
      268,  267,  267,  961,  926,  925,  268,  267,  962,  267,
      267,  924,  268,  267,  923,  267,  267,  267,  327,  267,
      267,  267,  922,  267,  267,  267,  268,  267,  267,  965,
      963,  268, 1227,  921, 1043,  268,  267,  964,  267,  267,
     1227, 1115, 1046,  268, 1115,  966,  920,  967,  267,  268,

      267,  267,  267,  268,  267,  267,  267,  268,  267,  267,
      267,  268,  267,  267,  267,  970,  267,  267,  968,  971,
     1227,  267,  268,  267,  267, 1094,  267,  973,  267,  267,
      969,  919,  813,  326,  268,  972,  326,  267,  268,  267,
      267, 1095,  268, 1116,  810,  267,  268,  267,  267,  267,
      268,  267,  267,  267,  974,  267,  267,  268,  267,  809,
      267,  267,  268,  985,  267,  808,  267,  267,  267,  327,
      267,  267, 1227,  268, 1105,  976,  267,  975,  267,  267,
      850,  268,  267,  850,  267,  268,  267,  267,  326,  268,
      326,  326,  326,  326,  268,  326,  807,  977,  326,  978,

      268,  326,  806,  805,  268,  986,  979,  326,  983,  804,
      326,  988,  268,  980,  326,  803,  268,  326,  326,  982,
      268,  326,  326,  802,  327,  326,  327,  326,  327,  801,
      326,  989,  851,  800,  327,  987,  981,  799,  326,  326,
      990,  326,  326,  327,  326,  326,  326,  326,  326,  326,
      327,  991,  992,  994,  327,  798,  326,  993,  327,  326,
      797,  996,  326,  327,  326,  326, 1227,  326, 1110,  326,
      326,  796,  326,  326,  327,  327,  995,  997,  795,  794,
      327,  327,  327,  793,  326,  326,  998,  326,  326,  792,
      326,  326,  327,  326,  326,  791,  326, 1001,  327,  326,

      327,  999, 1000, 1002, 1004,  327,  327,  790,  326,  326,
     1003,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      327,  327,  326,  789,  788,  326,  327,  327,  326, 1005,
      326,  787,  327,  326,  326,  786,  785,  326,  888, 1007,
      326,  888,  784,  326,  327,  327, 1006,  783,  782,  327,
      327,  327, 1227,  781, 1112,  327, 1227,  780, 1154, 1008,
     1009,  327,  267,  779,  267,  267,  327,  778, 1010,  326,
      327, 1011,  326,  777,  327, 1053,  327, 1227,  267, 1156,
      267,  267,  267,  776,  267,  267,  267,  775,  267,  267,
      889, 1054, 1012,  267,  326,  267,  267,  326,  268, 1055,

      267,  654,  267,  267,  267,  327,  267,  267,  267,  653,
      267,  267,  652,  267,  268,  267,  267,  267,  268,  267,
      267,  267,  268,  267,  267,  267,  474,  267,  267,  268,
      327,  267, 1056,  267,  267,  267,  268,  267,  267,  267,
      268,  267,  267,  267,  268,  267,  267, 1058, 1057,  268,
      651,  648,  267,  268,  267,  267,  267,  268,  267,  267,
     1227,  268, 1189, 1059, 1227, 1061, 1191,  268,  645, 1062,
      267,  268,  267,  267,  267,  268,  267,  267, 1158,  268,
     1060, 1158,  267, 1063,  267,  267,  326, 1064,  268,  326,
      644,  267,  268,  267,  267,  267,  643,  267,  267,  267,

      642,  267,  267,  641,  638,  267,  268,  267,  267, 1065,
      268, 1227,  267, 1209,  267,  267,  637,  267,  268,  267,
      267,  636,  327, 1068, 1066, 1067,  267,  268,  267,  267,
     1159,  268,  635,  634,  267,  268,  267,  267, 1227,  633,
     1224,  268,  267,  326,  267,  267,  326,  267,  268,  267,
      267,  326,  326,  268,  326,  326, 1073,  326,  326,  632,
      326,  326,  268,  631, 1074, 1075, 1069,  630,  326,  326,
      268,  326,  326, 1071,  326,  627, 1070,  326,  268,  327,
      626,  326,  326,  268,  326,  326,  625,  327,  327, 1076,
      624, 1072,  623,  327,  327, 1077,  326,  326,  326,  326,

      326,  326,  622,  326,  327,  327,  326,  621,  326,  620,
      327,  326, 1078,  619,  618,  617, 1082,  327,  327,  326,
     1081, 1083,  326,  326,  326, 1080,  326,  326, 1079,  616,
      615,  614,  327,  327,  327,  326, 1084,  326,  326,  327,
      326,  443,  326,  326,  327,  326,  326,  326,  326,  326,
      326,  326,  326, 1085,  326,  327, 1087,  326,  326,  327,
      327,  326, 1227,  263,  483, 1088,  326, 1086,  482,  326,
      257,  327,  267,  327,  267,  267,  253,  326,  327,  327,
      326,  481,  249,  327,  327,  327,  267,  244,  267,  267,
      327,  480, 1115, 1091,  327, 1115,  479, 1089,  267, 1090,

      267,  267,  327,  267,  478,  267,  267, 1092,  268,  267,
      477,  267,  267,  327,  476,  267, 1118,  267,  267,  475,
      326,  243,  268,  326,  267,  238,  267,  267,  267,  237,
      267,  267,  236,  267,  268,  267,  267,  473,  267,  268,
      267,  267,  470, 1119, 1116,  268, 1120,  267,  469,  267,
      267,  268,  267, 1121,  267,  267,  327,  468, 1122,  267,
      268,  267,  267, 1161,  268,  267, 1161,  267,  267,  268,
      467,  466, 1123,  267,  268,  267,  267,  267,  326,  267,
      267,  326,  267,  268,  267,  267,  326,  465,  268,  326,
     1125,  267, 1126,  267,  267,  268, 1128, 1124,  267, 1128,

      267,  268,  267,  267,  326,  326,  464,  326,  326,  268,
      463,  462,  461,  268,  327, 1162,  326, 1131,  268,  326,
      326,  326,  327,  326,  326,  326,  326,  268,  326,  326,
     1127,  326,  268, 1132,  326,  460,  268,  459, 1133, 1130,
      327,  327,  458,  457,  454, 1134, 1135,  326, 1129,  453,
      326,  452,  327,  451,  450,  326,  327,  327,  326,  447,
     1136,  327,  327,  326,  446,  326,  326,  327,  326,  326,
      326, 1141,  326,  326, 1141,  445,  444,  326, 1138, 1139,
      326, 1115,  443,  327, 1115,  196,  267, 1137,  267,  267,
      196,  327, 1227,  267,  193,  267,  267, 1227,  265,  327,

      267,  327,  267,  267,  261,  327,  327,  327,  267, 1140,
      267,  267,  267,  327,  267,  267, 1143,  267, 1163,  267,
      267, 1165,  268, 1142,  267, 1164,  267,  267,  326,  268,
     1166,  326,  267, 1116,  267,  267,  268, 1167,  267,  326,
      267,  267,  326, 1169,  268,  267, 1169, 1128,  268,  267,
     1128,  258,  267,  268,  267,  267, 1172, 1177,  267, 1172,
      268,  257,  326,  253,  327,  326,  326,  326,  268,  326,
      326,  249,  244,  243,  268,  327, 1168,  238,  326,  268,
     1176,  326,  326,  268,  237,  326,  326, 1174,  268,  326,
      236, 1175,  268,  326, 1180, 1170,  326, 1180,  327, 1129,

      225,  224,  327,  327, 1171,  219, 1178, 1141, 1173,  326,
     1141,  218,  326, 1183,  327,  217, 1183, 1158,  327,  206,
     1158,  203,  327, 1161, 1179,  199, 1161,  196, 1227,  327,
      327,  193, 1158, 1161, 1227, 1158, 1161,  267,  326,  267,
      267,  326,  191,  327, 1227,  327, 1181, 1227, 1227,  327,
     1195, 1201,  267, 1227,  267,  267, 1227, 1227, 1227, 1142,
      267, 1182,  267,  267,  267, 1184,  267,  267, 1227, 1159,
     1196, 1227, 1227,  268,  327, 1162,  267, 1197,  267,  267,
      267, 1227,  267,  267, 1159, 1162, 1227, 1169,  268,  267,
     1169,  267, 1227,  267,  267,  267,  268,  267,  267, 1172,

      268,  267, 1172, 1227,  267, 1227,  267,  267,  326, 1227,
      326,  326,  268,  326, 1227, 1227,  268,  326,  326, 1198,
      326,  326,  326,  268, 1227,  326, 1202,  268, 1227, 1180,
     1203,  268, 1180,  326,  326,  268,  326,  326, 1183, 1170,
      268, 1183,  326, 1199,  327,  326,  327,  267, 1227,  267,
      267, 1173,  326,  327,  327,  326, 1200, 1227,  327, 1227,
      267, 1204,  267,  267,  267,  327,  267,  267,  326,  327,
      327,  326, 1227, 1211,  327, 1227, 1227,  267,  327,  267,
      267, 1181, 1227,  268,  267, 1205,  267,  267,  327,  267,
     1184,  267,  267, 1227, 1206,  326,  268, 1227,  326,  326,

      268, 1227,  326,  326,  327, 1227,  326,  326, 1213, 1227,
      326, 1227,  267,  268,  267,  267,  267, 1227,  267,  267,
      268,  326, 1227, 1212,  326,  268,  326, 1227, 1227,  326,
      267,  327,  267,  267,  326,  327, 1227,  326,  267,  327,
      267,  267, 1227,  327,  326, 1214,  326,  326,  268,  326,
     1227, 1225,  268,  267, 1227,  267,  267,  327, 1227, 1226,
     1227, 1227,  327, 1227, 1227, 1217,  268, 1227, 1227, 1227,
      327, 1227, 1221, 1227,  268, 1218, 1222, 1227, 1227, 1227,
      327, 1227,  327, 1227, 1227, 1227, 1227, 1227, 1227,  268,
       56,   56,   56,   56,   56,   56,   61,   61,   61,   61,

       61,   61,   68,   68,   68,   68,   68,   68,   73,   73,
       73,   73,   73,   73,  184,  184,  184,  184,  184,  184,
      192,  192, 1227, 1227,  192,  192,  234,  234, 1227,  234,
      234,  234,  245,  245,  245,  245,  245,  245,  248, 1227,
     1227, 1227,  248,  248,  250,  250,  250,  250,  250,  250,
      256,  256, 1227, 1227,  256,  256,  262,  262,  262,  262,
      262,  262,  266,  266, 1227,  266,  266,  266,  274,  274,
     1227,  274,  274,  274,  313,  313, 1227,  313,  313,  313,
      325,  325, 1227, 1227, 1227,  325,  333,  333, 1227, 1227,
      333,  333,  373,  373, 1227,  373,  373,  373,  432,  432,

     1227, 1227, 1227,  432,   17, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227
    } ;

static yyconst flex_int16_t yy_chk[4161] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    7,    7,    2,    2,
        3,    3,    3,    3,    5,    5,    6,    6,    2,    4,
        4,    4,    4,    4,    8,    8,   15,   15,   15,   15,
       19,    2,   37,   19,   33,   15,   36,    4,   24,   24,
       26,   26,   28,   28,    2,   33,   37,   36,   31,    2,

       43,    2,   31,    2,   71,   31,    2,    2,   43,   71,
     1246,    5,   15,    6,   73,   73,    5,    4,    6,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   10,   38,   53,   10,   10,   16,
       16,   16,   16,   35,   42,   49,   35,   10,   16,   54,
       35,   54,   38,   35,   67,  164,   42,  426,   53,   49,

       10,   59,   59,   59,   64,   64,   64,   64,  157,  157,
      158,  158,  162,   10,  174,   16,  164, 1220,   10,  162,
       10,  174,   10,  426,   67,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   12,  169,  171,   12,   12,   76,  176,   76,
       76,   77,   77,   77,   77,   12,   79,   79,   79,   79,

      161,  160,  169,  163,  165,  171,  170,  400,   12,  160,
      161,  209,  165,  163,  161,  165,  176,  161,  400,  165,
      170,   12,  165,   76,  163,  209,   12,   77,   12,  203,
       12,  203,   79,   12,   12,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       14,  179,  255,   14,   14,   80,  407,   80,   80,   81,

      180,   81,   81,   14,  115, 1216,   81,  115,   82,  181,
       82,   82,   83,  407,   83,   83,   14,  195,  195,   82,
       82,   84,  255,   84,   84,   85,  179,   85,   85,   14,
      405,   80,   84,   84,   14,   81,   14,   85,   14,  180,
      115,   14,   14,   46,   82,  181,   46,   46,   83,  405,
      119,  166,   86,  119,   86,   86,   46,   84,  232,  166,
      232,   85, 1210,   86,   86,   87,  408,   87,   87,  173,
      166,   88,  173,   88,   88,   89,  167,   89,   89,  167,
      173,   90,   46,   90,   90,  408,  119,   46,   86,   46,
       88,  198,  198,  167,   46,   46,   89,  235,  235,   90,

       89,   87,   91,   89,   91,   91,  168,   88,  585,  168,
       92,   89,   92,   92,  262,  262,  190,   90,   93,  190,
       93,   93,   94,   91,   94,   94,  168,  224,  585,   95,
      224,   95,   95,   97,   91,   97,   97,   93,   91,  172,
       93,   94,   92,   95,   93,  410,   92,   93,   96,  172,
       96,   96,   94,   98,   93,   98,   98,   95,   94,  240,
      410,  172,   96,   97,   99,   95,   99,   99,  126,   97,
      100,  126,  100,  100,  102, 1192,  102,  102,   98,   96,
      101,  240,  101,  101,   96,  103,  103,  103,  103,   98,
      395,  100,  102,  395,  101,  104,   99,  104,  104,  427,

       99,  597,  101,  100,  126,  106,  100,  106,  106,  597,
      102,  105,  105,  105,  105,  107,  101,  107,  107,  403,
      127,  103,  108,  127,  108,  108,  109,  427,  109,  109,
      110,  104,  110,  110,  104,  111,  108,  111,  111,  127,
      403,  106,  112,  129,  112,  112,  129,  105,  259,  394,
      108,  107,  113,  259,  113,  113,  127,  114,  108,  114,
      114,  129,  109,  394,  178,  416,  110,  178,  112,  416,
      183,  111,  109, 1190,  116,  116,  116,  116,  112,  129,
      110,  178,  111,  118,  118,  118,  118,  182,  113,  113,
      112,  113,  120,  114,  121,  120,  183,  121,  183,  120,

      123,  120,  182,  123,  124,  121,  121,  124,  396,  114,
      116,  123,  123,  397,  125,  396,  124,  125,  128,  118,
      130,  128, 1162,  130,  182,  125,  125,  397,  120,  131,
      121,  141,  131,  398,  141,  399,  123,  392,  392,  128,
      124,  130,  399,  128,  132,  133,  128,  132,  133,  141,
      125,  398,  130,  398,  128,  134,  130,  135,  134,  136,
      135,  131,  136,  132,  133,  131,  132,  141,  411,  134,
      132,  135,  406,  132,  137,  133,  138,  137,  418,  138,
      132,  133,  139,  134,  140,  139,  406,  140,  135,  136,
      411,  134,  418,  135,  143,  136,  412,  143,  140,  137,

      393,  393,  145,  139,  145,  145,  140,  412,  138,  743,
      137,  145,  138,  146,  148,  139,  146,  148,  139,  743,
      140,  142,  142,  142,  142,  144,  144,  144,  144,  149,
      143,  147,  149,  143,  147,  401,  150,  151,  145,  150,
      151,  152,  401,  590,  152,  147,  409,  414,  153,  146,
      148,  153,  154,  154,  154,  154,  590,  142,  414,  147,
      148,  144,  409,  151,  415,  149,  429,  147,  156,  156,
      156,  156,  150,  151,  247,  247,  247,  152,  152,  149,
      152,  429,  579,  150,  153,  151,  415,  579,  154,  175,
      175,  175,  175,  177,  177,  177,  177, 1159,  184,  413,

      153,  184,  413,  429,  156,  185,  185,  185,  185,  187,
      187,  187,  187,  189,  189,  189,  189,  252,  252,  252,
      261,  261,  261,  261,  266,  402,  266,  266,  267,  177,
      267,  267,  402, 1157,  184,  268,  268,  268,  268,  417,
      274,  185,  274,  274,  430,  187,  425,  274,  417,  189,
      269,  269,  269,  269,  271,  271,  271,  271,  589,  276,
      266,  276,  276,  589,  267,  272,  272,  272,  272,  422,
      458,  268,  275,  261,  275,  275,  274,  430,  425,  275,
      277,  277,  277,  277,  458,  325,  269,  277,  325,  278,
      271,  278,  278, 1208,  279,  276,  279,  279,  422,  431,

      280,  278,  280,  280,  575,  279,  279,  281,  275,  281,
      281,  282,  280,  282,  282,  283,  277,  283,  283,  281,
      575,  325,  282,  282,  284,  278,  284,  284, 1208,  577,
      279,  285,  326,  285,  285,  326,  280,  431,  284,  286,
      283,  286,  286,  281,  419,  428,  577,  282,  428,  285,
      287,  283,  287,  287,  288,  419,  288,  288,  419,  290,
      284,  290,  290,  289,  286,  289,  289,  285,  326,  584,
      610,  291,  288,  291,  291,  286,  584,  290,  424,  287,
      292,  287,  292,  292,  335,  289,  287,  335,  581,  291,
      288,  293,  580,  293,  293,  290,  424,  424,  294,  289,

      294,  294,  581,  580,  610,  293,  295,  291,  295,  295,
      603,  296,  292,  296,  296,  297,  292,  297,  297,  293,
      335,  298,  468,  298,  298,  468,  343,  293,  294,  343,
      299,  295,  299,  299,  294,  300,  603,  300,  300,  296,
      343,  301,  295,  301,  301,  297,  357,  296,  298,  357,
      302,  297,  302,  302, 1155,  593,  299,  298,  303,  593,
      303,  303,  343,  301,  302,  591,  299,  304,  300,  304,
      304,  300,  305,  357,  305,  305,  306,  301,  306,  306,
      303,  307,  357,  307,  307,  591,  302,  305,  308,  574,
      308,  308,  574,  586,  303,  311,  306,  311,  311,  587,

      304,  578,  313,  304,  313,  313,  307, 1153,  305,  586,
      308,  576,  306,  308,  576,  741,  587,  307,  309,  309,
      309,  309,  578,  314,  308,  314,  314,  315,  315,  315,
      315,  311, 1030,  583,  741,  311,  583,  316,  313,  316,
      316,  317,  596,  317,  317,  318,  582,  318,  318,  319,
      353,  319,  319,  353,  309,  320,  596,  320,  320,  314,
     1030,  582,  322,  315,  322,  322,  316,  316,  321,  320,
      321,  321,  323,  316,  323,  323,  324,  317,  324,  324,
      353,  318,  318,  599,  317,  319,  353,  608,  319,  592,
      404,  320,  588,  404,  321,  588,  592,  752,  322,  327,

      327,  327,  327,  599,  321,  608,  322,  404,  323,  588,
      348,  342,  324,  348,  342,  752,  321,  328,  328,  328,
      328,  323,  330,  330,  330,  330,  331,  331,  331,  331,
      333,  334,  348,  333,  334,  327,  342,  333,  334,  333,
      334,  336,  336,  336,  336,  605,  348,  342,  336,  337,
      336,  338,  337,  328,  338,  601,  339,  340,  330,  339,
      340,  337,  338,  338,  601, 1152,  333,  334,  339,  340,
      341,  344,  345,  341,  344,  345,  347,  336,  605,  347,
      346,  341,  341,  346,  744,  337,  744,  338,  351,  344,
     1116,  351,  339,  340,  347,  349,  350,  345,  349,  350,

      354,  352,  355,  354,  352,  355,  341,  344,  345,  346,
      594,  346,  347,  349,  350,  352,  346,  594,  356,  358,
      351,  356,  358,  359,  351,  354,  359,  600,  595,  352,
      355,  349,  350,  595,  600,  602,  354,  352,  355,  360,
      602,  362,  360,  361,  362,  358,  361,  363,  356,  364,
      363,  607,  364,  740,  356,  358,  359,  361,  740,  359,
      760,  360,  365,  362,  364,  365,  366,  367, 1113,  366,
      367,  368,  368,  368,  368,  360,  760,  362,  371,  361,
      363,  371,  365,  363,  607,  364,  747,  378,  747,  367,
      378,  366,  367,  370,  370,  370,  370,  373,  365,  373,

      373,  376,  366,  367,  376, 1111,  373,  368,  374,  377,
      374,  374,  377,  380,  371,  609,  380,  374,  371,  375,
      375,  375,  375,  378,  378,  748,  379,  380,  375,  379,
      376,  376,  381,  373,  598,  381,  383,  376,  382,  383,
      384,  382,  893,  384,  374,  377,  748,  609,  389,  380,
      389,  389,  377,  742,  598,  375,  746,  598,  381,  751,
      754,  893,  379,  746,  739,  379,  432,  433,  381,  432,
      433,  756,  383,  739,  382,  742,  384,  754,  756,  751,
      381,  757,  382,  757,  389,  383,  385,  385,  385,  385,
      387,  387,  387,  387,  388,  388,  388,  388,  420,  420,

      420,  420,  432,  433,  434,  434,  434,  434,  435,  435,
      435,  435,  437,  437,  437,  437,  438,  438,  438,  438,
      918,  439,  385,  439,  439,  759,  387,  440,  440,  440,
      440,  442,  442,  442,  442,  474,  474,  474,  474,  476,
      434,  758,  476,  758,  435,  759,  918,  749,  437,  482,
      482,  482,  482,  483,  483,  483,  483,  439,  484,  484,
      484,  484,  749,  440,  486,  486,  486,  486,  487,  487,
      487,  487,  489,  489,  489,  489,  490,  490,  490,  490,
      761,  915,  491,  490,  491,  491,  492,  761,  492,  492,
      493,  476,  493,  493,  491,  494,  649,  494,  494,  649,

      492,  745,  482,  773,  487,  495,  483,  495,  495,  494,
      745,  484,  490,  496,  915,  496,  496,  493,  491, 1109,
      753,  497,  492,  497,  497,  498,  493,  498,  498,  753,
      773,  494,  500,  495,  500,  500,  501,  497,  501,  501,
      499,  495,  499,  499, 1108,  496,  750,  498,  649,  496,
      501,  502,  538,  502,  502,  538,  910,  497,  500,  750,
      503,  498,  503,  503,  505,  499,  505,  505,  500,  502,
      910,  504,  501,  504,  504,  506,  499,  506,  506,  507,
      538,  507,  507,  509,  755,  509,  509,  502,  538,  506,
      535,  503,  505,  535,  771,  507,  503,  755,  504,  508,

      505,  508,  508,  506,  535,  769,  510,  504,  510,  510,
      511,  506,  511,  511,  509,  507,  764, 1107,  512,  509,
      512,  512,  769,  508,  510,  511,  535,  513,  771,  513,
      513,  514,  762,  514,  514,  508,  512,  764,  515,  762,
      515,  515,  510,  513,  770,  516,  511,  516,  516,  517,
      763,  517,  517,  766,  512,  766,  514,  515,  763,  518,
     1106,  518,  518,  513,  891,  772,  519,  514,  519,  519,
      521,  891,  521,  521,  515,  765,  516,  518,  765,  516,
      517,  516,  767,  770,  767,  517,  519,  520,  906,  520,
      520,  522,  522,  522,  522,  518,  523,  523,  523,  523,

      791, 1052,  519,  520,  772, 1051,  521,  521,  524,  906,
      524,  524,  525,  916,  525,  525,  791,  526,  534,  526,
      526,  534,  527,  520,  527,  527,  528,  522,  528,  528,
      534,  529,  523,  529,  529,  530,  530,  530,  530,  532,
      532,  532,  532,  916,  524,  768,  537,  895,  525,  537,
      890,  527,  524,  526,  534,  768,  536,  895,  527,  536,
      537,  526,  528,  539,  525,  541,  539,  529,  541,  528,
      890,  530,  533,  533,  533,  533,  529,  540, 1049,  533,
      540,  533,  537,  536, 1048,  542,  543,  541,  542,  543,
     1047,  544,  536,  540,  544,  539,  892,  545,  892,  539,

      545,  541,  912,  546,  547,  544,  546,  547,  533,  894,
      542,  894,  543,  540,  548,  545,  549,  548,  903,  549,
      550,  542,  543,  550,  912,  551,  552,  544,  551,  552,
      549,  547,  914,  545,  546,  553,  550,  903,  553,  546,
      547,  905,  548,  554,  549,  555,  554,  914,  555,  551,
      548,  556,  549,  553,  556, 1045,  550,  552,  554, 1020,
      905,  551,  552,  555, 1025,  557,  558,  556,  557,  558,
     1020,  553,  559,  560,  561,  559,  560,  561, 1025,  554,
      562,  555,  896,  562,  896,  558,  564,  556, 1044,  564,
      557,  563,  561,  897,  563,  897,  565,  565,  565,  565,

      562,  557,  558,  559,  560,  565,  559,  563,  559,  560,
      561,  566,  566,  566,  566,  907,  562,  567,  567,  567,
      567,  568,  564,  564,  568,  569,  570,  563,  569,  570,
      571,  572,  565,  571,  572,  573,  907,  917,  573,  604,
      604,  604,  604,  606,  653, 1040,  606,  653,  902,  898,
      604,  898,  913,  567,  606, 1096,  899,  568,  899,  571,
     1039,  569,  570,  932,  917,  568,  571,  572,  902, 1096,
      570,  573,  811,  913,  572,  811,  900,  569,  900,  932,
      573,  611,  611,  611,  611,  613,  613,  613,  613,  646,
      646,  646,  646, 1016, 1028,  606,  653,  655,  655,  655,

      655,  657,  657,  657,  657,  658,  658,  658,  658,  660,
      660,  660,  660,  661, 1016,  661,  661,  611,  662,  704,
      662,  662,  704,  663,  811,  663,  663,  664, 1031,  664,
      664, 1038, 1028,  661,  662,  665, 1099,  665,  665,  666,
      704,  666,  666,  901,  667,  901,  667,  667,  702,  661,
      655,  702,  666,  663,  662,  704,  665, 1099,  658,  663,
      664, 1037, 1024,  664,  667,  668, 1031,  668,  668, 1024,
      670,  665,  670,  670,  669,  666,  669,  669,  702,  671,
      667,  671,  671,  668,  702, 1035,  731,  669,  672,  731,
      672,  672,  673,  950,  673,  673,  674,  700,  674,  674,

      700,  668,  670, 1219,  701,  671,  670,  701,  948, 1019,
      669,  675,  672,  675,  675,  671,  676,  700,  676,  676,
      701, 1029,  731,  673,  672,  674, 1019,  677,  673,  677,
      677,  675,  674,  700, 1219,  678,  731,  678,  678,  681,
      701,  681,  681,  679,  676,  679,  679,  675,  908,  947,
      908,  677,  676,  678,  946,  680,  679,  680,  680,  682,
     1029,  682,  682,  677,  683, 1027,  683,  683,  680, 1097,
      681,  678, 1027, 1094,  684,  681,  684,  684,  685,  679,
      685,  685,  683, 1097, 1144,  686,  682,  686,  686,  945,
     1094,  680,  684, 1095,  909,  682,  909,  685, 1144,  687,

      683,  687,  687,  688, 1095,  688,  688, 1101, 1101,  689,
      684,  689,  689,  687,  685,  705,  688,  686,  705, 1102,
      944,  686,  689,  690,  943,  690,  690,  691,  705,  691,
      691,  692,  942,  692,  692,  687,  911,  940,  911,  688,
      693,  693,  693,  693,  690,  689,  694, 1102,  694,  694,
      695,  705,  695,  695,  696,  691,  696,  696,  697,  690,
      697,  697,  698,  691,  698,  698, 1147,  692,  699,  706,
      699,  699,  706, 1147,  703,  707,  693,  703,  707,  937,
      709,  692,  694,  709,  936, 1013,  695, 1013,  935,  706,
      696,  694,  710,  707,  697,  710,  708,  934,  698,  708,

      698, 1014,  695, 1014,  699,  706,  696,  703,  697,  708,
      703,  707,  709, 1015,  711, 1015,  709,  711,  710,  713,
      699,  712,  713,  714,  712, 1017,  714, 1017,  710,  933,
      715,  717,  708,  715,  717, 1104,  716,  720,  711,  716,
      720,  718,  721,  714,  718,  721,  931, 1188,  713,  717,
      711,  924,  712,  722,  718,  713,  722,  712,  715,  714,
      716,  719,  723, 1104,  719,  723,  715,  717,  720,  721,
      922,  722,  716,  720,  719, 1188,  724,  718,  721,  724,
      723,  725,  726,  729,  725,  726,  729,  727,  728,  722,
      727,  728, 1021, 1149, 1021,  724,  726,  719,  723,  730,

      727,  728,  730, 1186,  729,  732,  732,  732,  732,  920,
     1186,  733,  724,  725,  733,  919,  813,  725,  726,  729,
     1149,  812,  734,  727,  728,  734,  735,  730, 1145,  735,
      736,  737,  810,  736,  737,  730,  738,  774,  809,  738,
      774,  732, 1145,  815,  904,  815,  815,  733,  774,  904,
      814,  854,  814,  814,  854,  807,  733,  816,  734,  816,
      816,  815,  735,  806,  854,  904,  736,  737, 1215,  737,
      816,  805,  738,  817,  734,  817,  817,  804,  735,  815,
      736,  814,  818,  801,  818,  818,  814,  854,  738,  774,
     1022,  800, 1022,  816,  819,  818,  819,  819,  820,  799,

      820,  820,  821,  817,  821,  821, 1215,  798,  822,  817,
      822,  822,  797,  796,  823,  821,  823,  823,  818,  820,
      824,  795,  824,  824,  792,  790,  825,  823,  825,  825,
      819,  789,  857,  824,  820,  857,  788,  787,  821,  825,
      826,  786,  826,  826,  822,  827,  785,  827,  827,  828,
      823,  828,  828,  826,  784,  782,  824,  829,  827,  829,
      829,  781,  825,  830,  779,  830,  830,  831,  857,  831,
      831,  832,  778,  832,  832,  833,  826,  833,  833,  830,
      828,  827, 1023,  777, 1023,  828,  834,  829,  834,  834,
     1026, 1050, 1026,  829, 1050,  830,  776,  831,  835,  830,

      835,  835,  836,  831,  836,  836,  837,  832,  837,  837,
      838,  833,  838,  838,  839,  836,  839,  839,  834,  837,
     1018,  840,  834,  840,  840, 1018,  841,  839,  841,  841,
      835,  775,  654,  855,  835,  838,  855,  842,  836,  842,
      842, 1018,  837, 1050,  652,  843,  838,  843,  843,  844,
      839,  844,  844,  845,  840,  845,  845,  840,  846,  651,
      846,  846,  841,  855,  847,  650,  847,  847,  848,  855,
      848,  848, 1093,  842, 1093,  844,  849,  843,  849,  849,
      850,  843,  850,  850,  851,  844,  851,  851,  852,  845,
      853,  852,  856,  853,  846,  856,  648,  845,  859,  846,

      847,  859,  645,  644,  848,  856,  848,  860,  853,  643,
      860,  859,  849,  849,  858,  642,  850,  858,  861,  852,
      851,  861,  866,  641,  852,  866,  853,  862,  856,  640,
      862,  861,  850,  639,  859,  858,  851,  638,  863,  864,
      862,  863,  864,  860,  865,  868,  867,  865,  868,  867,
      858,  863,  864,  866,  861,  637,  869,  865,  866,  869,
      636,  868,  870,  862,  871,  870, 1098,  871, 1098,  872,
      873,  635,  872,  873,  863,  864,  867,  868,  634,  633,
      865,  868,  867,  632,  874,  876,  869,  874,  876,  631,
      875,  877,  869,  875,  877,  630,  878,  874,  870,  878,

      871,  872,  873,  875,  877,  872,  873,  629,  879,  880,
      876,  879,  880,  882,  881,  883,  882,  881,  883,  884,
      874,  876,  884,  628,  627,  885,  875,  877,  885,  878,
      886,  626,  878,  886,  887,  625,  624,  887,  888,  882,
      889,  888,  623,  889,  879,  880,  881,  622,  621,  882,
      881,  883, 1100,  620, 1100,  884, 1146,  619, 1146,  883,
      884,  885,  951,  618,  951,  951,  886,  617,  886,  984,
      887,  887,  984,  616,  888,  951,  889, 1148,  952, 1148,
      952,  952,  953,  615,  953,  953,  954,  614,  954,  954,
      888,  952,  889,  955,  986,  955,  955,  986,  951,  954,

      956,  481,  956,  956,  957,  984,  957,  957,  958,  480,
      958,  958,  479,  959,  952,  959,  959,  960,  953,  960,
      960,  961,  954,  961,  961,  962,  478,  962,  962,  955,
      986,  964,  956,  964,  964,  963,  956,  963,  963,  970,
      957,  970,  970,  966,  958,  966,  966,  964,  963,  959,
      477,  475,  965,  960,  965,  965,  967,  961,  967,  967,
     1185,  962, 1185,  964, 1187,  966, 1187,  964,  473,  967,
      968,  963,  968,  968,  969,  970,  969,  969, 1114,  966,
      965, 1114,  971,  968,  971,  971,  988,  969,  965,  988,
      472,  972,  967,  972,  972,  973,  471,  973,  973,  974,

      470,  974,  974,  469,  467,  976,  968,  976,  976,  972,
      969, 1207,  975, 1207,  975,  975,  466,  977,  971,  977,
      977,  465,  988,  976,  974,  975,  978,  972,  978,  978,
     1114,  973,  464,  463,  979,  974,  979,  979, 1223,  462,
     1223,  976,  980,  982,  980,  980,  982,  981,  975,  981,
      981,  983,  985,  977,  983,  985,  982,  987,  989,  461,
      987,  989,  978,  460,  983,  985,  977,  459,  990,  991,
      979,  990,  991,  979,  992,  457,  978,  992,  980,  982,
      456,  993,  994,  981,  993,  994,  455,  983,  985,  987,
      454,  980,  453,  987,  989,  994,  995,  996,  997,  995,

      996,  997,  452,  998,  990,  991,  998,  451,  999,  450,
      992,  999,  995,  449,  448,  447,  998,  993,  994, 1001,
      997,  999, 1001, 1000, 1002,  996, 1000, 1002,  995,  446,
      445,  444,  995,  996,  997, 1003, 1000, 1004, 1003,  998,
     1004,  443, 1005, 1006,  999, 1005, 1006, 1007, 1008, 1009,
     1007, 1008, 1009, 1003, 1010, 1001, 1006, 1010, 1011, 1000,
     1002, 1011,  391,  264,  260, 1007, 1012, 1005,  257, 1012,
      256, 1003, 1053, 1004, 1053, 1053,  254, 1073, 1005, 1006,
     1073,  253,  251, 1007, 1008, 1009, 1054,  246, 1054, 1054,
     1010,  242, 1115, 1010, 1011, 1115,  241, 1008, 1055, 1009,

     1055, 1055, 1012, 1056,  239, 1056, 1056, 1011, 1053, 1057,
      238, 1057, 1057, 1073,  237, 1058, 1056, 1058, 1058,  236,
     1074,  233, 1054, 1074, 1059,  231, 1059, 1059, 1060,  230,
     1060, 1060,  229, 1061, 1055, 1061, 1061,  225, 1062, 1056,
     1062, 1062,  223, 1058, 1115, 1057, 1059, 1063,  222, 1063,
     1063, 1058, 1064, 1060, 1064, 1064, 1074,  221, 1061, 1065,
     1059, 1065, 1065, 1117, 1060, 1066, 1117, 1066, 1066, 1061,
      220,  219, 1065, 1067, 1062, 1067, 1067, 1068, 1075, 1068,
     1068, 1075, 1069, 1063, 1069, 1069, 1077,  218, 1064, 1077,
     1068, 1070, 1069, 1070, 1070, 1065, 1071, 1066, 1071, 1071,

     1072, 1066, 1072, 1072, 1076, 1078,  217, 1076, 1078, 1067,
      216,  215,  214, 1068, 1075, 1117, 1079, 1076, 1069, 1079,
     1080, 1081, 1077, 1080, 1081, 1082, 1083, 1070, 1082, 1083,
     1070, 1084, 1071, 1078, 1084,  213, 1072,  212, 1079, 1072,
     1076, 1078,  211,  210,  208, 1080, 1081, 1085, 1071,  207,
     1085,  206, 1079,  205,  204, 1086, 1080, 1081, 1086,  202,
     1085, 1082, 1083, 1087,  201, 1088, 1087, 1084, 1088, 1089,
     1090, 1091, 1089, 1090, 1091,  200,  199, 1092, 1088, 1089,
     1092, 1103,  197, 1085, 1103,  196, 1118, 1086, 1118, 1118,
      194, 1086, 1103, 1119,  192, 1119, 1119,  159,   75, 1087,

     1120, 1088, 1120, 1120,   72, 1089, 1090, 1091, 1121, 1090,
     1121, 1121, 1122, 1092, 1122, 1122, 1092, 1123, 1119, 1123,
     1123, 1121, 1118, 1091, 1124, 1120, 1124, 1124, 1131, 1119,
     1122, 1131, 1125, 1103, 1125, 1125, 1120, 1124, 1126, 1135,
     1126, 1126, 1135, 1127, 1121, 1127, 1127, 1128, 1122, 1128,
     1128,   70, 1129, 1123, 1129, 1129, 1130, 1135, 1130, 1130,
     1124,   68, 1132,   66, 1131, 1132, 1133, 1134, 1125, 1133,
     1134,   63,   58,   55, 1126, 1135, 1126,   52, 1136, 1127,
     1134, 1136, 1138, 1128,   51, 1138, 1139, 1132, 1129, 1139,
       50, 1133, 1130, 1137, 1140, 1127, 1137, 1140, 1132, 1128,

       45,   44, 1133, 1134, 1129,   41, 1137, 1141, 1130, 1142,
     1141,   40, 1142, 1143, 1136,   39, 1143, 1150, 1138,   34,
     1150,   32, 1139, 1151, 1139,   30, 1151,   27, 1150, 1137,
     1140,   23, 1158, 1161, 1151, 1158, 1161, 1163, 1174, 1163,
     1163, 1174,   21, 1141,   17, 1142, 1140,    0,    0, 1143,
     1163, 1174, 1164,    0, 1164, 1164,    0,    0,    0, 1141,
     1165, 1142, 1165, 1165, 1166, 1143, 1166, 1166,    0, 1150,
     1164,    0,    0, 1163, 1174, 1151, 1167, 1166, 1167, 1167,
     1168,    0, 1168, 1168, 1158, 1161,    0, 1169, 1164, 1169,
     1169, 1170,    0, 1170, 1170, 1171, 1165, 1171, 1171, 1172,

     1166, 1172, 1172,    0, 1173,    0, 1173, 1173, 1175,    0,
     1176, 1175, 1167, 1176,    0,    0, 1168, 1177, 1178, 1168,
     1177, 1178, 1179, 1169,    0, 1179, 1175, 1170,    0, 1180,
     1177, 1171, 1180, 1181, 1182, 1172, 1181, 1182, 1183, 1169,
     1173, 1183, 1184, 1170, 1175, 1184, 1176, 1195,    0, 1195,
     1195, 1172, 1201, 1177, 1178, 1201, 1173,    0, 1179,    0,
     1196, 1179, 1196, 1196, 1197, 1180, 1197, 1197, 1203, 1181,
     1182, 1203,    0, 1196, 1183,    0,    0, 1198, 1184, 1198,
     1198, 1180,    0, 1195, 1199, 1181, 1199, 1199, 1201, 1200,
     1183, 1200, 1200,    0, 1184, 1202, 1196,    0, 1202, 1204,

     1197,    0, 1204, 1205, 1203,    0, 1205, 1206, 1202,    0,
     1206,    0, 1211, 1198, 1211, 1211, 1212,    0, 1212, 1212,
     1199, 1213,    0, 1198, 1213, 1200, 1214,    0,    0, 1214,
     1217, 1202, 1217, 1217, 1218, 1204,    0, 1218, 1221, 1205,
     1221, 1221,    0, 1206, 1226, 1204, 1222, 1226, 1211, 1222,
        0, 1221, 1212, 1225,    0, 1225, 1225, 1213,    0, 1222,
        0,    0, 1214,    0,    0, 1212, 1217,    0,    0,    0,
     1218,    0, 1217,    0, 1221, 1214, 1218,    0,    0,    0,
     1226,    0, 1222,    0,    0,    0,    0,    0,    0, 1225,
     1228, 1228, 1228, 1228, 1228, 1228, 1229, 1229, 1229, 1229,

     1229, 1229, 1230, 1230, 1230, 1230, 1230, 1230, 1231, 1231,
     1231, 1231, 1231, 1231, 1232, 1232, 1232, 1232, 1232, 1232,
     1233, 1233,    0,    0, 1233, 1233, 1234, 1234,    0, 1234,
     1234, 1234, 1235, 1235, 1235, 1235, 1235, 1235, 1236,    0,
        0,    0, 1236, 1236, 1237, 1237, 1237, 1237, 1237, 1237,
     1238, 1238,    0,    0, 1238, 1238, 1239, 1239, 1239, 1239,
     1239, 1239, 1240, 1240,    0, 1240, 1240, 1240, 1241, 1241,
        0, 1241, 1241, 1241, 1242, 1242,    0, 1242, 1242, 1242,
     1243, 1243,    0,    0,    0, 1243, 1244, 1244,    0,    0,
     1244, 1244, 1245, 1245,    0, 1245, 1245, 1245, 1247, 1247,

        0,    0,    0, 1247, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[88] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
//
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include <algorithm>
#include <cstring>
#include <queue>
#include "mapdef.h"
#include "levcomp.tab.h"
#include "stuff.h"

static bool alloced = false;

queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

// Enter a new state, first clearing yylval of junk.
#define CBEGIN(x) do { BEGIN(x); clean(); } while (0)

static void post_proc_text(char *text, bool trim_right,
                           int strip_trailing, int strip_leading)
{
    char *s = NULL;
    if (trim_right)
    {
        s = text + strlen(text) - 1;
        while (s >= text && isspace(*s))
            *s-- = 0;
    }
    if (strip_trailing)
    {
        if (!s)
            s = text + strlen(text) - 1;
        while (s >= text && --strip_trailing >= 0)
            *s-- = 0;
    }
    if (strip_leading)
    {
        const int original_length = strlen(text);
        if (original_length > strip_leading)
            memmove(text, text + strip_leading,
                    original_length - strip_leading);
        if (original_length >= strip_leading)
            text[original_length - strip_leading] = 0;
    }
}

static char *copy_text(bool trim_right, int strip_trailing, int strip_leading)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        post_proc_text(newstring, trim_right, strip_trailing, strip_leading);
    }
    return (newstring);
}

static void settext(bool trim_right = false,
                    int strip_trailing = 0,
                    int strip_leading = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing, strip_leading);
    yylval.text = newstring;
}

static void str_check()
{
    if (!yylval.text)
    {
        char *buf = (char *) malloc(1);
        if (buf)
        {
            yylval.text = buf;
            *buf = 0;
            alloced = true;
        }
    }
}

static void cattext(bool trim_right = false, int strip_trailing = 0)
{
    if (!yylval.text)
        settext(trim_right, strip_trailing);
    else
    {
        bool was_alloced = alloced;
        char *newbuf = (char*) malloc(strlen(yylval.text) + strlen(yytext) + 1);
        if (!newbuf)
            end(1, false, "Out of memory");
        alloced = true;
        strcpy(newbuf, yylval.text);
        strcat(newbuf, yytext);
        post_proc_text(newbuf, trim_right, strip_trailing, 0);
        if (was_alloced)
            free((void*) yylval.text);
        yylval.text = newbuf;
    }
}








#line 1939 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 145 "levcomp.lpp"


#line 2139 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1228 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1227 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 147 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 149 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 154 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 155 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 156 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 158 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 161 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 170 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 172 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 176 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 178 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 183 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 184 "levcomp.lpp"
;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 185 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 187 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 191 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 193 "levcomp.lpp"
{
                        cattext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 199 "levcomp.lpp"
;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 200 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 202 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 204 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 208 "levcomp.lpp"
;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 210 "levcomp.lpp"
{
                        cattext();
                        return MONSTER_NAME;
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 215 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 216 "levcomp.lpp"
;
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 218 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 222 "levcomp.lpp"
;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 224 "levcomp.lpp"
{
                        cattext();
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 228 "levcomp.lpp"
cattext();
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 230 "levcomp.lpp"
{ BEGIN(INITIAL); str_check(); return STRING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 232 "levcomp.lpp"
;
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 234 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 236 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 238 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 239 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 240 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 241 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 242 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 243 "levcomp.lpp"
{ BEGIN(LUA); return EPILOGUE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 245 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 246 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 247 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DESC; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 248 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 249 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 250 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 251 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 252 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 253 "levcomp.lpp"
return WEIGHT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 254 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 255 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 256 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 257 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 258 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 259 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 260 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORCOL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 261 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKCOL; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 262 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORTILE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 263 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKTILE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 264 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FTILE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 265 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return RTILE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 266 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return TILE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 267 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FHEIGHT; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 268 "levcomp.lpp"
{ CBEGIN(MNAME); return MONS; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 269 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 270 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return MARKER; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 271 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 272 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return CLEAR; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 274 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 275 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 276 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 277 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 278 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KPROP; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 279 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return SUBVAULT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 281 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 283 "levcomp.lpp"
return COLON;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 285 "levcomp.lpp"
return PERC;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 286 "levcomp.lpp"
return DASH;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 288 "levcomp.lpp"
{
                        clean();
                        yylval.f = strtod(yytext, NULL);
                        return NUMBER;
                    }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 294 "levcomp.lpp"
{
                        settext(true, 1, 1);
                        return STRING;
                    }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 299 "levcomp.lpp"
;
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 300 "levcomp.lpp"
;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 301 "levcomp.lpp"
;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 302 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 304 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2731 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1228 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1228 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1227);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 304 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

